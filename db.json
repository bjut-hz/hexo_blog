{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":0},{"_id":"source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":0},{"_id":"source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"c1d5678ed2ec47cc1bda1d32e364b5ab53c34d93","modified":1515163062315},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1515163381167},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1515163381167},{"_id":"themes/next/.git","hash":"042ff34da0707513a5681580b37513c890c671ef","modified":1515163380147},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1515163381167},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1515163381167},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1515163381167},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1515163381167},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1515163381167},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1515163381167},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1515163381167},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1515163381167},{"_id":"themes/next/README.cn.md","hash":"87950c415dd162ff78e98b41f1148b85462103e2","modified":1515163381182},{"_id":"themes/next/README.md","hash":"927f82cfeb5969a89b815b5ec3a3f2881e3b1bb4","modified":1515163381182},{"_id":"themes/next/_config.yml","hash":"58db16f230accb285a1703c8ff88e84df44e446c","modified":1515223808159},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1515163381182},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1515163381182},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1515163381214},{"_id":"source/_drafts/用lua实现面向对象.md","hash":"d955b3d05712af87ebc51746fee76e8fb42b9eaf","modified":1515224886138},{"_id":"source/_posts/C++ lambda表达式.md","hash":"b8c1a228f19c0529bdc3a2cb3812b5a0d84e8a1b","modified":1515166749920},{"_id":"source/_posts/C++ 类类型转换.md","hash":"49af781e050ccfb750b434ba57bae39f93efbfbe","modified":1515166755991},{"_id":"source/_posts/C++ 高阶函数.md","hash":"ff858137cc00a9bc72c42f1a028afac0fa9c5b36","modified":1515166953357},{"_id":"source/_posts/卡马克：用C++进行函数式编程.md","hash":"a597447d30031890cfb34663b27c3b62ce46deb1","modified":1515166765941},{"_id":"source/categories/index.md","hash":"86e4d8cfb01789a271ca0315faf65ec643bdf98b","modified":1515164974683},{"_id":"source/about/index.md","hash":"1af4a480f68be4ce6b5f187772ffb7447552de94","modified":1515165373373},{"_id":"source/images/avatar.jpg","hash":"1257d41ed7c813e7d0e5ebcb3371028bfaaef169","modified":1515163062333},{"_id":"source/schedule/index.md","hash":"ee82365f0f7d6730bf5bf515c400fdcf8e78bc81","modified":1515224446738},{"_id":"source/tags/index.md","hash":"76dee13bd089936bcbb25abaf96327fd15b1e420","modified":1515165090851},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1515163381167},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b1ec000babd42bb7ffd26f5ad8aac9b5bec79ae5","modified":1515163381167},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1515163381167},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1515163381167},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1515163381182},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1515163381182},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1515163381182},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1515163381182},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1515163381182},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1515163381182},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1515163381182},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1515163381182},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1515163381182},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1515163381182},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1515163381182},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1515163381182},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1515163381182},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1515163381182},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1515163381182},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1515163381182},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1515163381182},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1515163381214},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1515163381214},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1515163381214},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1515163381214},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1515163381214},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1515163381214},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1515163381214},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1515163381214},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1515163381214},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1515163381339},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1515163381339},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1515163381339},{"_id":"source/images/alipay.jpg","hash":"c58ce4c07364c755c17894787c831f930026af0d","modified":1515163062331},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515163381261},{"_id":"source/images/wechatpay.jpg","hash":"fb084a6bee071ad73b74a68121332eafc8529ff8","modified":1515163062335},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1515163381182},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1515163381182},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1515163381182},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1515163381182},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1515163381182},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1515163381182},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1515163381182},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1515163381182},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1515163381182},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1515163381182},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1515163381182},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1515163381182},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1515163381182},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1515163381182},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1515163381198},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1515163381198},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1515163381198},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1515163381198},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1515163381198},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1515163381198},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1515163381198},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1515163381214},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1515163381214},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1515163381214},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1515163381214},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1515163381214},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1515163381214},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1515163381214},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1515163381214},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1515163381214},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1515163381214},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1515163381214},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1515163381214},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1515163381214},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1515163381261},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1515163381261},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1515163381261},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1515163381261},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1515163381261},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1515163381261},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1515163381261},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1515163381261},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1515163381261},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1515163381261},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1515163381261},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1515163381261},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1515163381261},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1515163381261},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1515163381261},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1515163381261},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1515163381261},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1515163381261},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1515163381261},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515163381198},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515163381198},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515163381245},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515163381245},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515163381245},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515163381261},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515163381261},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1515163381182},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1515163381182},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1515163381198},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1515163381198},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1515163381198},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1515163381198},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1515163381198},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1515163381198},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1515163381198},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1515163381198},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1515163381198},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1515163381198},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1515163381198},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1515163381198},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1515163381198},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1515163381198},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1515163381198},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1515163381198},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1515163381198},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1515163381198},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1515163381198},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1515163381198},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1515163381198},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1515163381198},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1515163381198},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1515163381198},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1515163381198},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1515163381198},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1515163381198},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1515163381198},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1515163381198},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1515163381198},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1515163381198},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1515163381198},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1515163381214},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1515163381214},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1515163381214},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1515163381214},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1515163381245},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1515163381245},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1515163381245},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1515163381245},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1515163381261},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1515163381261},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1515163381261},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1515163381261},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1515163381261},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1515163381261},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1515163381261},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1515163381261},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1515163381261},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1515163381261},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1515163381276},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1515163381276},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1515163381276},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1515163381276},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1515163381276},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1515163381276},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1515163381276},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1515163381276},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1515163381276},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1515163381276},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1515163381292},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1515163381292},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1515163381292},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1515163381292},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1515163381292},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1515163381292},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1515163381292},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1515163381292},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1515163381292},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1515163381307},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1515163381307},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1515163381307},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1515163381307},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1515163381307},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1515163381307},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1515163381307},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1515163381307},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1515163381307},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1515163381307},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1515163381323},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1515163381323},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1515163381323},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1515163381323},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1515163381323},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1515163381323},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1515163381323},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1515163381323},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1515163381323},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1515163381323},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1515163381323},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1515163381323},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1515163381323},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1515163381323},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1515163381323},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1515163381323},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1515163381323},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1515163381323},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1515163381323},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1515163381339},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1515163381339},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1515163381339},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1515163381307},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1515163381214},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1515163381214},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1515163381214},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1515163381214},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1515163381214},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1515163381214},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1515163381214},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1515163381229},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1515163381245},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1515163381245},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1515163381245},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1515163381245},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1515163381245},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1515163381245},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1515163381245},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1515163381245},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1515163381245},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1515163381245},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1515163381245},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1515163381245},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1515163381245},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1515163381245},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1515163381245},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1515163381245},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1515163381245},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1515163381245},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1515163381261},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1515163381261},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1515163381261},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1515163381261},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1515163381261},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1515163381261},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1515163381261},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1515163381261},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1515163381276},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1515163381276},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1515163381276},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1515163381276},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1515163381276},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1515163381276},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1515163381276},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1515163381292},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1515163381292},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1515163381292},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1515163381292},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1515163381292},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1515163381292},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1515163381292},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1515163381292},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1515163381292},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1515163381292},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1515163381292},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1515163381323},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1515163381323},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1515163381276},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1515163381307},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1515163381307},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1515163381323},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1515163381214},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1515163381214},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1515163381214},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1515163381214},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1515163381229},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1515163381245},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1515163381245},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1515163381245},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1515163381245},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1515163381245},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1515163381245},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1515163381245},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1515163381245},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1515163381245},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1515163381245},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1515163381245},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1515163381245},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1515163381245},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1515163381245},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1515163381261},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1515163381276},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1515163381276},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1515163381276},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1515163381276},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1515163381276},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1515163381292},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1515163381292},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1515163381292},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1515163381292},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1515163381292},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1515163381292},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1515163381292},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1515163381307},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1515163381307},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1515163381276},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1515163381323},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1515163381307}],"Category":[{"name":"C++","_id":"cjc31saqv0006sotd182pct0v"}],"Data":[],"Page":[{"title":"分类","date":"2018-01-05T15:08:59.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-01-05 23:08:59\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-01-05T15:09:34.683Z","path":"categories/index.html","layout":"page","_id":"cjc31saqe0001sotdt06b49e1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"日程","date":"2018-01-05T15:14:31.000Z","type":"schedule","comments":0,"_content":"","source":"schedule/index.md","raw":"---\ntitle: 日程\ndate: 2018-01-05 23:14:31\ntype: \"schedule\"\ncomments: false\n---\n","updated":"2018-01-06T07:40:46.738Z","path":"schedule/index.html","layout":"page","_id":"cjc31saqj0003sotdsvh193s7","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于","date":"2018-01-05T15:14:31.000Z","type":"about","comments":0,"_content":"","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2018-01-05 23:14:31\ntype: \"about\"\ncomments: false\n---\n","updated":"2018-01-05T15:16:13.373Z","path":"about/index.html","layout":"page","_id":"cjc31saqo0005sotd0mnorxpo","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-01-05T15:06:25.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-01-05 23:06:25\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-01-05T15:11:30.851Z","path":"tags/index.html","layout":"page","_id":"cjc31sar40009sotdvl4d03qj","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"用lua实现面向对象","_content":"","source":"_drafts/用lua实现面向对象.md","raw":"---\ntitle: 用lua实现面向对象\ntags:\n---\n","slug":"用lua实现面向对象","published":0,"date":"2018-01-06T07:48:06.138Z","updated":"2018-01-06T07:48:06.138Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc31saq50000sotdwsb5phde","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"C++ lambda表达式","date":"2016-06-20T06:36:53.000Z","_content":"\n\n> C++ 11在语言中加入了lambda表达式，lambda表达式可以方便地构造匿名函数。当我们定义lambda表达式时，C++编译器会创建一个匿名的与lambda表达式有关的类类型。\n\n<!-- more -->\n### 使用lambda表达式进行函数式编程\n\n我们知道，在函数式编程语言中，比如scheme，函数作为一等公民，与普通的数据类型相同，可以作为函数的参数以及返回值，可以很方便的实现高阶函数等。 在C++中，我们可以借助于函数对象以及函数指针实现。 在C ++11中，借助于lambda表达式，也可以实现高阶函数。\n\n### 将lambda表达式用作返回值\n定义在头文件中的std::function是多态的函数对象包装，类似函数指针。它可以绑定至任何可以被调用的对象(仿函数、成员函数指针、函数指针和lambda表达式)，只要参数和返回类型符合包装的类型即可。返回一个double、接受两个整数参数的函数包装定义如下：\n    \n    function< double(int, int) > my_wrapper;\n    \n通过std::function，可以从函数中返回lambda表达式，示例如下：\n\n    function<int(void)> multiplyBy2Lambda(int x)  \n    {  \n        return [=]()->int{ return 2 * x; };  \n    }\n    \n这个函数的主体部分创建了一个lambda表达式，这个lambda表达式通过值捕捉所在作用域的变量，并返回一个整数，这个返回的整数是传给multiplyBy2Lambda()的值的两倍。这个multiplyBy2Lambda()函数的返回值类型为 function，即一个不接受参数并返回一个整数的函数。函数主体中定义的lambda表达式正好匹配这个原型。变量x通过值捕捉，因此，在lambda表达式从函数返回之前，x值的一份副本绑定至lambda表达式中的x。\n可以通过下述方式调用该函数：\n\n    auto fun = multiplyBy2Lambda( 5 );\n    cout << fun(); //输出为10\n\n### 将lambda表达式用作参数\n可以编写lambda表达式作为参数的函数。例如，可通过这种方式实现回调函数。下面的代码实现了一个testCallback()函数，这个函数接受一个整数vector和一个回调函数作为参数。这个实现迭代给定vector中的所有元素，并对每个元素调用回调函数，回调函数接受vector中每个元素作为int参数，并返回一个布尔值。如果回调函数返回false，那么停止迭代。\n\n    //注意参数类型，第二个参数如果使用pass by reference，则必须加const修饰，否则编译错误\n    //如果采用值传递，无影响\n    void testCallback(const vector<int>& vec, const function<bool(int)>& callback)  \n    {  \n        for (auto i : vec)  \n        {  \n            if (!callback(i))  \n                break;  \n            cout << i << \" \";  \n        }  \n        cout << endl;  \n    }\n\n**测试：**\n\n    auto callback = []( int i ) -> bool { return i < 6; };\n    vector<int> vec( 10 );\n    int index = 0;\n    generate( vec.begin(), vec.end(), [&index] {return ++index; } );\n    \n    testCallback( vec, callback );\n\n**结果：**\n\n![结果](http://i.imgur.com/OHyYteu.png)\n\n### lambda表达式实现高阶函数\n\n有关C++ 高阶函数可以参看我的博文：C++ 高阶函数\n\n    int sumInt( int a, int b ){\n        int result { 0 };\n        for ( int i = a; i <= b; ++i ) {\n            result += i;\n        }\n        return result;\n    }\n    \n    int sumCube( int a, int b ){\n        int result { 0 };\n        for ( int i = a; i <= b; ++i ) {\n            result += i * i * i;\n        }\n        return result;\n    }\n    \n    //advanced abstraction\n    template < class T >\n    T sumGeneric( T a, T b, const function< int( int ) >& func,  const function< void( int& ) >& next ){\n        T result( 0 );\n        for ( T i = a; i <= b; next( i ) ) {\n            result += func( i );\n        }\n        return result;\n    }\n\n> 上述示例中，前两个求和函数有着相同的逻辑，可以进行抽象`sumGeneric`。\n\n**测试：**\n\n    auto self = []( int i ) -> int { return i; };\n    auto inc = []( int& i ) -> void {  ++i; };\n    auto cube = []( int i ) -> int { return i * i * i; };\n    \n    cout << \"Normal Cal:\" << endl;\n    cout << \"sumInt( 1, 50 ):\" << sumInt( 1, 50 ) << \" sumCube( 1, 50 ):\" << sumCube( 1, 50 );\n    \n    cout << endl << \"High Order Function:\" << endl;\n    cout << \"sumInt( 1, 50 ):\" << sumGeneric( 1, 50, self, inc )\n        << \" sumCube( 1, 50 ):\" << sumGeneric( 1, 50, cube, inc );\n\n**结果：**\n\n![结果](http://i.imgur.com/fyweW6U.png)\n\n代码下载地址：\nhttps://github.com/bjut-hz/High-Order-Function\n","source":"_posts/C++ lambda表达式.md","raw":"---\ntitle: C++ lambda表达式\ndate: 2016-06-20 14:36:53\ncategories:\n- C++\ntags:\n- C++\n- lambda\n---\n\n\n> C++ 11在语言中加入了lambda表达式，lambda表达式可以方便地构造匿名函数。当我们定义lambda表达式时，C++编译器会创建一个匿名的与lambda表达式有关的类类型。\n\n<!-- more -->\n### 使用lambda表达式进行函数式编程\n\n我们知道，在函数式编程语言中，比如scheme，函数作为一等公民，与普通的数据类型相同，可以作为函数的参数以及返回值，可以很方便的实现高阶函数等。 在C++中，我们可以借助于函数对象以及函数指针实现。 在C ++11中，借助于lambda表达式，也可以实现高阶函数。\n\n### 将lambda表达式用作返回值\n定义在头文件中的std::function是多态的函数对象包装，类似函数指针。它可以绑定至任何可以被调用的对象(仿函数、成员函数指针、函数指针和lambda表达式)，只要参数和返回类型符合包装的类型即可。返回一个double、接受两个整数参数的函数包装定义如下：\n    \n    function< double(int, int) > my_wrapper;\n    \n通过std::function，可以从函数中返回lambda表达式，示例如下：\n\n    function<int(void)> multiplyBy2Lambda(int x)  \n    {  \n        return [=]()->int{ return 2 * x; };  \n    }\n    \n这个函数的主体部分创建了一个lambda表达式，这个lambda表达式通过值捕捉所在作用域的变量，并返回一个整数，这个返回的整数是传给multiplyBy2Lambda()的值的两倍。这个multiplyBy2Lambda()函数的返回值类型为 function，即一个不接受参数并返回一个整数的函数。函数主体中定义的lambda表达式正好匹配这个原型。变量x通过值捕捉，因此，在lambda表达式从函数返回之前，x值的一份副本绑定至lambda表达式中的x。\n可以通过下述方式调用该函数：\n\n    auto fun = multiplyBy2Lambda( 5 );\n    cout << fun(); //输出为10\n\n### 将lambda表达式用作参数\n可以编写lambda表达式作为参数的函数。例如，可通过这种方式实现回调函数。下面的代码实现了一个testCallback()函数，这个函数接受一个整数vector和一个回调函数作为参数。这个实现迭代给定vector中的所有元素，并对每个元素调用回调函数，回调函数接受vector中每个元素作为int参数，并返回一个布尔值。如果回调函数返回false，那么停止迭代。\n\n    //注意参数类型，第二个参数如果使用pass by reference，则必须加const修饰，否则编译错误\n    //如果采用值传递，无影响\n    void testCallback(const vector<int>& vec, const function<bool(int)>& callback)  \n    {  \n        for (auto i : vec)  \n        {  \n            if (!callback(i))  \n                break;  \n            cout << i << \" \";  \n        }  \n        cout << endl;  \n    }\n\n**测试：**\n\n    auto callback = []( int i ) -> bool { return i < 6; };\n    vector<int> vec( 10 );\n    int index = 0;\n    generate( vec.begin(), vec.end(), [&index] {return ++index; } );\n    \n    testCallback( vec, callback );\n\n**结果：**\n\n![结果](http://i.imgur.com/OHyYteu.png)\n\n### lambda表达式实现高阶函数\n\n有关C++ 高阶函数可以参看我的博文：C++ 高阶函数\n\n    int sumInt( int a, int b ){\n        int result { 0 };\n        for ( int i = a; i <= b; ++i ) {\n            result += i;\n        }\n        return result;\n    }\n    \n    int sumCube( int a, int b ){\n        int result { 0 };\n        for ( int i = a; i <= b; ++i ) {\n            result += i * i * i;\n        }\n        return result;\n    }\n    \n    //advanced abstraction\n    template < class T >\n    T sumGeneric( T a, T b, const function< int( int ) >& func,  const function< void( int& ) >& next ){\n        T result( 0 );\n        for ( T i = a; i <= b; next( i ) ) {\n            result += func( i );\n        }\n        return result;\n    }\n\n> 上述示例中，前两个求和函数有着相同的逻辑，可以进行抽象`sumGeneric`。\n\n**测试：**\n\n    auto self = []( int i ) -> int { return i; };\n    auto inc = []( int& i ) -> void {  ++i; };\n    auto cube = []( int i ) -> int { return i * i * i; };\n    \n    cout << \"Normal Cal:\" << endl;\n    cout << \"sumInt( 1, 50 ):\" << sumInt( 1, 50 ) << \" sumCube( 1, 50 ):\" << sumCube( 1, 50 );\n    \n    cout << endl << \"High Order Function:\" << endl;\n    cout << \"sumInt( 1, 50 ):\" << sumGeneric( 1, 50, self, inc )\n        << \" sumCube( 1, 50 ):\" << sumGeneric( 1, 50, cube, inc );\n\n**结果：**\n\n![结果](http://i.imgur.com/fyweW6U.png)\n\n代码下载地址：\nhttps://github.com/bjut-hz/High-Order-Function\n","slug":"C++ lambda表达式","published":1,"updated":"2018-01-05T15:39:09.920Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc31saqg0002sotdr64hr7kl","content":"<blockquote>\n<p>C++ 11在语言中加入了lambda表达式，lambda表达式可以方便地构造匿名函数。当我们定义lambda表达式时，C++编译器会创建一个匿名的与lambda表达式有关的类类型。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"使用lambda表达式进行函数式编程\"><a href=\"#使用lambda表达式进行函数式编程\" class=\"headerlink\" title=\"使用lambda表达式进行函数式编程\"></a>使用lambda表达式进行函数式编程</h3><p>我们知道，在函数式编程语言中，比如scheme，函数作为一等公民，与普通的数据类型相同，可以作为函数的参数以及返回值，可以很方便的实现高阶函数等。 在C++中，我们可以借助于函数对象以及函数指针实现。 在C ++11中，借助于lambda表达式，也可以实现高阶函数。</p>\n<h3 id=\"将lambda表达式用作返回值\"><a href=\"#将lambda表达式用作返回值\" class=\"headerlink\" title=\"将lambda表达式用作返回值\"></a>将lambda表达式用作返回值</h3><p>定义在头文件中的std::function是多态的函数对象包装，类似函数指针。它可以绑定至任何可以被调用的对象(仿函数、成员函数指针、函数指针和lambda表达式)，只要参数和返回类型符合包装的类型即可。返回一个double、接受两个整数参数的函数包装定义如下：</p>\n<pre><code>function&lt; double(int, int) &gt; my_wrapper;\n</code></pre><p>通过std::function，可以从函数中返回lambda表达式，示例如下：</p>\n<pre><code>function&lt;int(void)&gt; multiplyBy2Lambda(int x)  \n{  \n    return [=]()-&gt;int{ return 2 * x; };  \n}\n</code></pre><p>这个函数的主体部分创建了一个lambda表达式，这个lambda表达式通过值捕捉所在作用域的变量，并返回一个整数，这个返回的整数是传给multiplyBy2Lambda()的值的两倍。这个multiplyBy2Lambda()函数的返回值类型为 function，即一个不接受参数并返回一个整数的函数。函数主体中定义的lambda表达式正好匹配这个原型。变量x通过值捕捉，因此，在lambda表达式从函数返回之前，x值的一份副本绑定至lambda表达式中的x。<br>可以通过下述方式调用该函数：</p>\n<pre><code>auto fun = multiplyBy2Lambda( 5 );\ncout &lt;&lt; fun(); //输出为10\n</code></pre><h3 id=\"将lambda表达式用作参数\"><a href=\"#将lambda表达式用作参数\" class=\"headerlink\" title=\"将lambda表达式用作参数\"></a>将lambda表达式用作参数</h3><p>可以编写lambda表达式作为参数的函数。例如，可通过这种方式实现回调函数。下面的代码实现了一个testCallback()函数，这个函数接受一个整数vector和一个回调函数作为参数。这个实现迭代给定vector中的所有元素，并对每个元素调用回调函数，回调函数接受vector中每个元素作为int参数，并返回一个布尔值。如果回调函数返回false，那么停止迭代。</p>\n<pre><code>//注意参数类型，第二个参数如果使用pass by reference，则必须加const修饰，否则编译错误\n//如果采用值传递，无影响\nvoid testCallback(const vector&lt;int&gt;&amp; vec, const function&lt;bool(int)&gt;&amp; callback)  \n{  \n    for (auto i : vec)  \n    {  \n        if (!callback(i))  \n            break;  \n        cout &lt;&lt; i &lt;&lt; &quot; &quot;;  \n    }  \n    cout &lt;&lt; endl;  \n}\n</code></pre><p><strong>测试：</strong></p>\n<pre><code>auto callback = []( int i ) -&gt; bool { return i &lt; 6; };\nvector&lt;int&gt; vec( 10 );\nint index = 0;\ngenerate( vec.begin(), vec.end(), [&amp;index] {return ++index; } );\n\ntestCallback( vec, callback );\n</code></pre><p><strong>结果：</strong></p>\n<p><img src=\"http://i.imgur.com/OHyYteu.png\" alt=\"结果\"></p>\n<h3 id=\"lambda表达式实现高阶函数\"><a href=\"#lambda表达式实现高阶函数\" class=\"headerlink\" title=\"lambda表达式实现高阶函数\"></a>lambda表达式实现高阶函数</h3><p>有关C++ 高阶函数可以参看我的博文：C++ 高阶函数</p>\n<pre><code>int sumInt( int a, int b ){\n    int result { 0 };\n    for ( int i = a; i &lt;= b; ++i ) {\n        result += i;\n    }\n    return result;\n}\n\nint sumCube( int a, int b ){\n    int result { 0 };\n    for ( int i = a; i &lt;= b; ++i ) {\n        result += i * i * i;\n    }\n    return result;\n}\n\n//advanced abstraction\ntemplate &lt; class T &gt;\nT sumGeneric( T a, T b, const function&lt; int( int ) &gt;&amp; func,  const function&lt; void( int&amp; ) &gt;&amp; next ){\n    T result( 0 );\n    for ( T i = a; i &lt;= b; next( i ) ) {\n        result += func( i );\n    }\n    return result;\n}\n</code></pre><blockquote>\n<p>上述示例中，前两个求和函数有着相同的逻辑，可以进行抽象<code>sumGeneric</code>。</p>\n</blockquote>\n<p><strong>测试：</strong></p>\n<pre><code>auto self = []( int i ) -&gt; int { return i; };\nauto inc = []( int&amp; i ) -&gt; void {  ++i; };\nauto cube = []( int i ) -&gt; int { return i * i * i; };\n\ncout &lt;&lt; &quot;Normal Cal:&quot; &lt;&lt; endl;\ncout &lt;&lt; &quot;sumInt( 1, 50 ):&quot; &lt;&lt; sumInt( 1, 50 ) &lt;&lt; &quot; sumCube( 1, 50 ):&quot; &lt;&lt; sumCube( 1, 50 );\n\ncout &lt;&lt; endl &lt;&lt; &quot;High Order Function:&quot; &lt;&lt; endl;\ncout &lt;&lt; &quot;sumInt( 1, 50 ):&quot; &lt;&lt; sumGeneric( 1, 50, self, inc )\n    &lt;&lt; &quot; sumCube( 1, 50 ):&quot; &lt;&lt; sumGeneric( 1, 50, cube, inc );\n</code></pre><p><strong>结果：</strong></p>\n<p><img src=\"http://i.imgur.com/fyweW6U.png\" alt=\"结果\"></p>\n<p>代码下载地址：<br><a href=\"https://github.com/bjut-hz/High-Order-Function\" target=\"_blank\" rel=\"noopener\">https://github.com/bjut-hz/High-Order-Function</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>C++ 11在语言中加入了lambda表达式，lambda表达式可以方便地构造匿名函数。当我们定义lambda表达式时，C++编译器会创建一个匿名的与lambda表达式有关的类类型。</p>\n</blockquote>","more":"<h3 id=\"使用lambda表达式进行函数式编程\"><a href=\"#使用lambda表达式进行函数式编程\" class=\"headerlink\" title=\"使用lambda表达式进行函数式编程\"></a>使用lambda表达式进行函数式编程</h3><p>我们知道，在函数式编程语言中，比如scheme，函数作为一等公民，与普通的数据类型相同，可以作为函数的参数以及返回值，可以很方便的实现高阶函数等。 在C++中，我们可以借助于函数对象以及函数指针实现。 在C ++11中，借助于lambda表达式，也可以实现高阶函数。</p>\n<h3 id=\"将lambda表达式用作返回值\"><a href=\"#将lambda表达式用作返回值\" class=\"headerlink\" title=\"将lambda表达式用作返回值\"></a>将lambda表达式用作返回值</h3><p>定义在头文件中的std::function是多态的函数对象包装，类似函数指针。它可以绑定至任何可以被调用的对象(仿函数、成员函数指针、函数指针和lambda表达式)，只要参数和返回类型符合包装的类型即可。返回一个double、接受两个整数参数的函数包装定义如下：</p>\n<pre><code>function&lt; double(int, int) &gt; my_wrapper;\n</code></pre><p>通过std::function，可以从函数中返回lambda表达式，示例如下：</p>\n<pre><code>function&lt;int(void)&gt; multiplyBy2Lambda(int x)  \n{  \n    return [=]()-&gt;int{ return 2 * x; };  \n}\n</code></pre><p>这个函数的主体部分创建了一个lambda表达式，这个lambda表达式通过值捕捉所在作用域的变量，并返回一个整数，这个返回的整数是传给multiplyBy2Lambda()的值的两倍。这个multiplyBy2Lambda()函数的返回值类型为 function，即一个不接受参数并返回一个整数的函数。函数主体中定义的lambda表达式正好匹配这个原型。变量x通过值捕捉，因此，在lambda表达式从函数返回之前，x值的一份副本绑定至lambda表达式中的x。<br>可以通过下述方式调用该函数：</p>\n<pre><code>auto fun = multiplyBy2Lambda( 5 );\ncout &lt;&lt; fun(); //输出为10\n</code></pre><h3 id=\"将lambda表达式用作参数\"><a href=\"#将lambda表达式用作参数\" class=\"headerlink\" title=\"将lambda表达式用作参数\"></a>将lambda表达式用作参数</h3><p>可以编写lambda表达式作为参数的函数。例如，可通过这种方式实现回调函数。下面的代码实现了一个testCallback()函数，这个函数接受一个整数vector和一个回调函数作为参数。这个实现迭代给定vector中的所有元素，并对每个元素调用回调函数，回调函数接受vector中每个元素作为int参数，并返回一个布尔值。如果回调函数返回false，那么停止迭代。</p>\n<pre><code>//注意参数类型，第二个参数如果使用pass by reference，则必须加const修饰，否则编译错误\n//如果采用值传递，无影响\nvoid testCallback(const vector&lt;int&gt;&amp; vec, const function&lt;bool(int)&gt;&amp; callback)  \n{  \n    for (auto i : vec)  \n    {  \n        if (!callback(i))  \n            break;  \n        cout &lt;&lt; i &lt;&lt; &quot; &quot;;  \n    }  \n    cout &lt;&lt; endl;  \n}\n</code></pre><p><strong>测试：</strong></p>\n<pre><code>auto callback = []( int i ) -&gt; bool { return i &lt; 6; };\nvector&lt;int&gt; vec( 10 );\nint index = 0;\ngenerate( vec.begin(), vec.end(), [&amp;index] {return ++index; } );\n\ntestCallback( vec, callback );\n</code></pre><p><strong>结果：</strong></p>\n<p><img src=\"http://i.imgur.com/OHyYteu.png\" alt=\"结果\"></p>\n<h3 id=\"lambda表达式实现高阶函数\"><a href=\"#lambda表达式实现高阶函数\" class=\"headerlink\" title=\"lambda表达式实现高阶函数\"></a>lambda表达式实现高阶函数</h3><p>有关C++ 高阶函数可以参看我的博文：C++ 高阶函数</p>\n<pre><code>int sumInt( int a, int b ){\n    int result { 0 };\n    for ( int i = a; i &lt;= b; ++i ) {\n        result += i;\n    }\n    return result;\n}\n\nint sumCube( int a, int b ){\n    int result { 0 };\n    for ( int i = a; i &lt;= b; ++i ) {\n        result += i * i * i;\n    }\n    return result;\n}\n\n//advanced abstraction\ntemplate &lt; class T &gt;\nT sumGeneric( T a, T b, const function&lt; int( int ) &gt;&amp; func,  const function&lt; void( int&amp; ) &gt;&amp; next ){\n    T result( 0 );\n    for ( T i = a; i &lt;= b; next( i ) ) {\n        result += func( i );\n    }\n    return result;\n}\n</code></pre><blockquote>\n<p>上述示例中，前两个求和函数有着相同的逻辑，可以进行抽象<code>sumGeneric</code>。</p>\n</blockquote>\n<p><strong>测试：</strong></p>\n<pre><code>auto self = []( int i ) -&gt; int { return i; };\nauto inc = []( int&amp; i ) -&gt; void {  ++i; };\nauto cube = []( int i ) -&gt; int { return i * i * i; };\n\ncout &lt;&lt; &quot;Normal Cal:&quot; &lt;&lt; endl;\ncout &lt;&lt; &quot;sumInt( 1, 50 ):&quot; &lt;&lt; sumInt( 1, 50 ) &lt;&lt; &quot; sumCube( 1, 50 ):&quot; &lt;&lt; sumCube( 1, 50 );\n\ncout &lt;&lt; endl &lt;&lt; &quot;High Order Function:&quot; &lt;&lt; endl;\ncout &lt;&lt; &quot;sumInt( 1, 50 ):&quot; &lt;&lt; sumGeneric( 1, 50, self, inc )\n    &lt;&lt; &quot; sumCube( 1, 50 ):&quot; &lt;&lt; sumGeneric( 1, 50, cube, inc );\n</code></pre><p><strong>结果：</strong></p>\n<p><img src=\"http://i.imgur.com/fyweW6U.png\" alt=\"结果\"></p>\n<p>代码下载地址：<br><a href=\"https://github.com/bjut-hz/High-Order-Function\" target=\"_blank\" rel=\"noopener\">https://github.com/bjut-hz/High-Order-Function</a></p>"},{"title":"C++类类型转换","date":"2016-05-06T14:32:28.000Z","_content":"\n\n\n### 隐式类类型转换\n>在c++中，可以调用单参数构造函数，把指定类型转换为该类类型。这样的构造函数有时也被称为转换构造函数(converting constructors)。也就是说类的单参数构造函数，提供了把该形参类型转换为该类类型的一种方式。\n\n<!-- more -->\n**最常见的例子：**\n\nstring name = \"Bill\";\n在该例子中，由于string类提供了构造函数string (const char * s);因此存在字符串常量\"Bill\"到string类的隐式转换。\n\n**自定义类型示例：**\n\n    class Sales_data {\n    public:\n        Sales_data() = default;\n        Sales_data( const std::string &s ) : bookNo( s ) { }\n        Sales_data( const std::string &s, unsigned n, double p ) :\n            bookNo( s ), units_sold( n ), revenue( p*n ) { }\n        Sales_data( std::istream & );\n    \n        std::string isbn() const { return bookNo; }\n        Sales_data& combine( const Sales_data& );\n    \n    private:\n        std::string     bookNo;\n        unsigned         units_sold;\n        double             revenue;\n    };\n在上述例子中，由于`Sales_data( const std::string &s )；`构造函数的存在，因此存在`string`类型到`Sales_data`的转换，因此在需要`Sales_data`对象的时候，我们可以使用`string`类型替代。\n\n    Sales_data item;\n    string null_book = \"9-999-99999-9\";\n    item.combine( null_book );\n**PS：**\n\n只有一次的隐式类类型转换是可行的，item.combine( \"9-999-99999-9\" );是错误的，因为在该语句中，存在着两次隐式转换，一次是字符串常量\"9-999-99999-9\"到string的转换，另一次是string到Sales_data的转换。\n\n**explicit constructors：**\n\n在你不想隐式转换，以防用户误操作怎么办？\n\nC++提供了一种抑制构造函数隐式转换的办法，就是在构造函数前面加explicit关键字，你试试就知道，那时你再希望隐式转换就会导致编译失败，但是，要说明的是，显式转换还是可以进行。\n\n---\n\n### 类型转换函数\n\n类型转换函数(type conversion function)的作用是将一个类的对象转换成另一类型的数据\n\n我们经常下述代码风格：\n\n    while( cin >> num ){\n    }\n输入操作符 `>>` 是二元操作符，返回做操作数作为其表达式结果，因此`cin >> num`返回`cin`,然而`cin`是输入流`istream`的对象，该对象能出现在条件表达式中，是因为在`istream`中定义了类型转换函数 `operator bool();`。\n\n**示例：**\n\n    class Sales_data {\n    public:\n            return true;\n        }    \n    };\n类`Sales_data`定义了从该类对象到`bool`类型的转换，因此，在需要`bool`类型的表达式中可以使用该类对象代替：\n\n    Sales_data item;\n    \n    if ( item ) {\n        cout << \"true\";\n    }","source":"_posts/C++ 类类型转换.md","raw":"---\ntitle: C++类类型转换\ndate: 2016-05-06 22:32:28\ncategories:\n- C++\ntags:\n- C++\n- 隐式转换\n---\n\n\n\n### 隐式类类型转换\n>在c++中，可以调用单参数构造函数，把指定类型转换为该类类型。这样的构造函数有时也被称为转换构造函数(converting constructors)。也就是说类的单参数构造函数，提供了把该形参类型转换为该类类型的一种方式。\n\n<!-- more -->\n**最常见的例子：**\n\nstring name = \"Bill\";\n在该例子中，由于string类提供了构造函数string (const char * s);因此存在字符串常量\"Bill\"到string类的隐式转换。\n\n**自定义类型示例：**\n\n    class Sales_data {\n    public:\n        Sales_data() = default;\n        Sales_data( const std::string &s ) : bookNo( s ) { }\n        Sales_data( const std::string &s, unsigned n, double p ) :\n            bookNo( s ), units_sold( n ), revenue( p*n ) { }\n        Sales_data( std::istream & );\n    \n        std::string isbn() const { return bookNo; }\n        Sales_data& combine( const Sales_data& );\n    \n    private:\n        std::string     bookNo;\n        unsigned         units_sold;\n        double             revenue;\n    };\n在上述例子中，由于`Sales_data( const std::string &s )；`构造函数的存在，因此存在`string`类型到`Sales_data`的转换，因此在需要`Sales_data`对象的时候，我们可以使用`string`类型替代。\n\n    Sales_data item;\n    string null_book = \"9-999-99999-9\";\n    item.combine( null_book );\n**PS：**\n\n只有一次的隐式类类型转换是可行的，item.combine( \"9-999-99999-9\" );是错误的，因为在该语句中，存在着两次隐式转换，一次是字符串常量\"9-999-99999-9\"到string的转换，另一次是string到Sales_data的转换。\n\n**explicit constructors：**\n\n在你不想隐式转换，以防用户误操作怎么办？\n\nC++提供了一种抑制构造函数隐式转换的办法，就是在构造函数前面加explicit关键字，你试试就知道，那时你再希望隐式转换就会导致编译失败，但是，要说明的是，显式转换还是可以进行。\n\n---\n\n### 类型转换函数\n\n类型转换函数(type conversion function)的作用是将一个类的对象转换成另一类型的数据\n\n我们经常下述代码风格：\n\n    while( cin >> num ){\n    }\n输入操作符 `>>` 是二元操作符，返回做操作数作为其表达式结果，因此`cin >> num`返回`cin`,然而`cin`是输入流`istream`的对象，该对象能出现在条件表达式中，是因为在`istream`中定义了类型转换函数 `operator bool();`。\n\n**示例：**\n\n    class Sales_data {\n    public:\n            return true;\n        }    \n    };\n类`Sales_data`定义了从该类对象到`bool`类型的转换，因此，在需要`bool`类型的表达式中可以使用该类对象代替：\n\n    Sales_data item;\n    \n    if ( item ) {\n        cout << \"true\";\n    }","slug":"C++ 类类型转换","published":1,"updated":"2018-01-05T15:39:15.991Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc31saqm0004sotdeg34fsy3","content":"<h3 id=\"隐式类类型转换\"><a href=\"#隐式类类型转换\" class=\"headerlink\" title=\"隐式类类型转换\"></a>隐式类类型转换</h3><blockquote>\n<p>在c++中，可以调用单参数构造函数，把指定类型转换为该类类型。这样的构造函数有时也被称为转换构造函数(converting constructors)。也就是说类的单参数构造函数，提供了把该形参类型转换为该类类型的一种方式。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p><strong>最常见的例子：</strong></p>\n<p>string name = “Bill”;<br>在该例子中，由于string类提供了构造函数string (const char * s);因此存在字符串常量”Bill”到string类的隐式转换。</p>\n<p><strong>自定义类型示例：</strong></p>\n<pre><code>class Sales_data {\npublic:\n    Sales_data() = default;\n    Sales_data( const std::string &amp;s ) : bookNo( s ) { }\n    Sales_data( const std::string &amp;s, unsigned n, double p ) :\n        bookNo( s ), units_sold( n ), revenue( p*n ) { }\n    Sales_data( std::istream &amp; );\n\n    std::string isbn() const { return bookNo; }\n    Sales_data&amp; combine( const Sales_data&amp; );\n\nprivate:\n    std::string     bookNo;\n    unsigned         units_sold;\n    double             revenue;\n};\n</code></pre><p>在上述例子中，由于<code>Sales_data( const std::string &amp;s )；</code>构造函数的存在，因此存在<code>string</code>类型到<code>Sales_data</code>的转换，因此在需要<code>Sales_data</code>对象的时候，我们可以使用<code>string</code>类型替代。</p>\n<pre><code>Sales_data item;\nstring null_book = &quot;9-999-99999-9&quot;;\nitem.combine( null_book );\n</code></pre><p><strong>PS：</strong></p>\n<p>只有一次的隐式类类型转换是可行的，item.combine( “9-999-99999-9” );是错误的，因为在该语句中，存在着两次隐式转换，一次是字符串常量”9-999-99999-9”到string的转换，另一次是string到Sales_data的转换。</p>\n<p><strong>explicit constructors：</strong></p>\n<p>在你不想隐式转换，以防用户误操作怎么办？</p>\n<p>C++提供了一种抑制构造函数隐式转换的办法，就是在构造函数前面加explicit关键字，你试试就知道，那时你再希望隐式转换就会导致编译失败，但是，要说明的是，显式转换还是可以进行。</p>\n<hr>\n<h3 id=\"类型转换函数\"><a href=\"#类型转换函数\" class=\"headerlink\" title=\"类型转换函数\"></a>类型转换函数</h3><p>类型转换函数(type conversion function)的作用是将一个类的对象转换成另一类型的数据</p>\n<p>我们经常下述代码风格：</p>\n<pre><code>while( cin &gt;&gt; num ){\n}\n</code></pre><p>输入操作符 <code>&gt;&gt;</code> 是二元操作符，返回做操作数作为其表达式结果，因此<code>cin &gt;&gt; num</code>返回<code>cin</code>,然而<code>cin</code>是输入流<code>istream</code>的对象，该对象能出现在条件表达式中，是因为在<code>istream</code>中定义了类型转换函数 <code>operator bool();</code>。</p>\n<p><strong>示例：</strong></p>\n<pre><code>class Sales_data {\npublic:\n        return true;\n    }    \n};\n</code></pre><p>类<code>Sales_data</code>定义了从该类对象到<code>bool</code>类型的转换，因此，在需要<code>bool</code>类型的表达式中可以使用该类对象代替：</p>\n<pre><code>Sales_data item;\n\nif ( item ) {\n    cout &lt;&lt; &quot;true&quot;;\n}\n</code></pre>","site":{"data":{}},"excerpt":"<h3 id=\"隐式类类型转换\"><a href=\"#隐式类类型转换\" class=\"headerlink\" title=\"隐式类类型转换\"></a>隐式类类型转换</h3><blockquote>\n<p>在c++中，可以调用单参数构造函数，把指定类型转换为该类类型。这样的构造函数有时也被称为转换构造函数(converting constructors)。也就是说类的单参数构造函数，提供了把该形参类型转换为该类类型的一种方式。</p>\n</blockquote>","more":"<p><strong>最常见的例子：</strong></p>\n<p>string name = “Bill”;<br>在该例子中，由于string类提供了构造函数string (const char * s);因此存在字符串常量”Bill”到string类的隐式转换。</p>\n<p><strong>自定义类型示例：</strong></p>\n<pre><code>class Sales_data {\npublic:\n    Sales_data() = default;\n    Sales_data( const std::string &amp;s ) : bookNo( s ) { }\n    Sales_data( const std::string &amp;s, unsigned n, double p ) :\n        bookNo( s ), units_sold( n ), revenue( p*n ) { }\n    Sales_data( std::istream &amp; );\n\n    std::string isbn() const { return bookNo; }\n    Sales_data&amp; combine( const Sales_data&amp; );\n\nprivate:\n    std::string     bookNo;\n    unsigned         units_sold;\n    double             revenue;\n};\n</code></pre><p>在上述例子中，由于<code>Sales_data( const std::string &amp;s )；</code>构造函数的存在，因此存在<code>string</code>类型到<code>Sales_data</code>的转换，因此在需要<code>Sales_data</code>对象的时候，我们可以使用<code>string</code>类型替代。</p>\n<pre><code>Sales_data item;\nstring null_book = &quot;9-999-99999-9&quot;;\nitem.combine( null_book );\n</code></pre><p><strong>PS：</strong></p>\n<p>只有一次的隐式类类型转换是可行的，item.combine( “9-999-99999-9” );是错误的，因为在该语句中，存在着两次隐式转换，一次是字符串常量”9-999-99999-9”到string的转换，另一次是string到Sales_data的转换。</p>\n<p><strong>explicit constructors：</strong></p>\n<p>在你不想隐式转换，以防用户误操作怎么办？</p>\n<p>C++提供了一种抑制构造函数隐式转换的办法，就是在构造函数前面加explicit关键字，你试试就知道，那时你再希望隐式转换就会导致编译失败，但是，要说明的是，显式转换还是可以进行。</p>\n<hr>\n<h3 id=\"类型转换函数\"><a href=\"#类型转换函数\" class=\"headerlink\" title=\"类型转换函数\"></a>类型转换函数</h3><p>类型转换函数(type conversion function)的作用是将一个类的对象转换成另一类型的数据</p>\n<p>我们经常下述代码风格：</p>\n<pre><code>while( cin &gt;&gt; num ){\n}\n</code></pre><p>输入操作符 <code>&gt;&gt;</code> 是二元操作符，返回做操作数作为其表达式结果，因此<code>cin &gt;&gt; num</code>返回<code>cin</code>,然而<code>cin</code>是输入流<code>istream</code>的对象，该对象能出现在条件表达式中，是因为在<code>istream</code>中定义了类型转换函数 <code>operator bool();</code>。</p>\n<p><strong>示例：</strong></p>\n<pre><code>class Sales_data {\npublic:\n        return true;\n    }    \n};\n</code></pre><p>类<code>Sales_data</code>定义了从该类对象到<code>bool</code>类型的转换，因此，在需要<code>bool</code>类型的表达式中可以使用该类对象代替：</p>\n<pre><code>Sales_data item;\n\nif ( item ) {\n    cout &lt;&lt; &quot;true&quot;;\n}\n</code></pre>"},{"title":"C++ 高阶函数","date":"2016-07-21T15:39:52.000Z","_content":"\n>函数式编程有很多优点，详情可以参考我的博文卡马克：《用C++ 进行函数式编程》。在C++中，我们可以借助于函数对象或者函数指针来实现高阶函数。\n\n<!-- more -->\n\n#### 高阶函数是至少满足下列一个条件的函数:\n- 接受一个或多个函数作为输入\n- 输出一个函数\n\n### 三种求和方式\n\n![示例](http://i.imgur.com/7S95DNV.png)\n\n    //公式（1）\n    int sumInt( int a, int b ){\n        int result { 0 };\n        for ( int i = a; i <= b; ++i ) {\n            result += i;\n        }\n        return result;\n    }\n    \n    //公式（2）\n    int sumCube( int a, int b ){\n        int result { 0 };\n        for ( int i = a; i <= b; ++i ) {\n            result += i * i * i;\n        }\n        return result;\n    }\n    \n    //公式（3）\n    double sumPi( int a, int b ){\n        double result = 0;\n        for ( int i = 1; i <= b; i += 4 ) {\n            result += 1 / ( (double)(i) * (double)( i + 2 ) );\n        }\n        return result;\n    }\n    \n上述示例中，三个程序表面不同，但是程序包含的逻辑（对于不同序列进行求和）是相同的。对于计算机程序，这种类似就意味着抽象，进行更高层次的抽象，以较少重复劳动，减小出现错误的风险。\n\n上述代码可以抽象为：\n\n    //advanced abstraction\n    template < class T, class F, class G >\n    T sumGeneric( T a, T b, F func, G next ){\n        T result( 0 );\n        for ( T i = a; i <= b; next( i ) ) {\n            result += func( i ); \n        }\n        return result;\n    }\n\n上述代码，允许用户将循环体内的过程func和nex以参数的形式传入。只要它们能以函数的形式调用即可，在C++中，我们可以使用函数对象做到这一点。\n\n**实现如下：**\n\n    template < class T >\n    class Self{\n    public:\n        T operator()( T x ){ return x;  }\n    };\n    \n    template < class T >\n    class Cube{\n    public:\n        T operator()( T x ){ return x*x*x; }\n    };\n    \n    template< class T >\n    class MyFunc{\n    public:\n        T operator()( T x ){\n            return 1 / ( x * ( x + 2 ) );\n        }\n    };\n    \n    template < class T >\n    class Inc{\n    public:\n        void operator()( T& x ){ ++x; }\n    };\n    \n    template < class T >\n    class Inc4{\n    public:\n        void operator()( T& x ){ x += 4; }\n    };\n    \n**测试结果：**\n\n    int main(){\n        cout << \"Normal Cal:\" << endl;\n        cout << \"sumInt( 1, 50 ):\" << sumInt( 1, 50 ) << \" sumCube( 1, 50 ):\" << sumCube( 1, 50 ) << \" sumPi( 1, 50 ):\" << sumPi( 1, 50 );\n    \n        cout << endl << \"High Order Function:\" << endl;\n        cout << \"sumInt( 1, 50 ):\" << sumGeneric( 1, 50, Self<int>(), Inc<int>() ) \n            << \" sumCube( 1, 50 ):\" << sumGeneric( 1, 50, Cube<int>(), Inc<int>() )\n            << \" sumPi( 1, 50 ):\" << sumGeneric( (double)1, (double)50, MyFunc<double>(), Inc4<double>() );\n    \n        system( \"pause\" );\n    }\n    \n![结果](http://i.imgur.com/nvvFPya.png)\n\n### lambda表达式实现高阶函数\n\n> C++11在语言中加入了lambda表达式，我们可以借助与lambda表达式实现高阶函数。\n\n参看我的博文C++ lambda表达式\n\n代码下载地址：\nhttps://github.com/bjut-hz/High-Order-Function","source":"_posts/C++ 高阶函数.md","raw":"---\ntitle: C++ 高阶函数\ndate: 2016-07-21 23:39:52\ncategories:\n- C++\ntags:\n- C++\n- 高阶函数\n---\n\n>函数式编程有很多优点，详情可以参考我的博文卡马克：《用C++ 进行函数式编程》。在C++中，我们可以借助于函数对象或者函数指针来实现高阶函数。\n\n<!-- more -->\n\n#### 高阶函数是至少满足下列一个条件的函数:\n- 接受一个或多个函数作为输入\n- 输出一个函数\n\n### 三种求和方式\n\n![示例](http://i.imgur.com/7S95DNV.png)\n\n    //公式（1）\n    int sumInt( int a, int b ){\n        int result { 0 };\n        for ( int i = a; i <= b; ++i ) {\n            result += i;\n        }\n        return result;\n    }\n    \n    //公式（2）\n    int sumCube( int a, int b ){\n        int result { 0 };\n        for ( int i = a; i <= b; ++i ) {\n            result += i * i * i;\n        }\n        return result;\n    }\n    \n    //公式（3）\n    double sumPi( int a, int b ){\n        double result = 0;\n        for ( int i = 1; i <= b; i += 4 ) {\n            result += 1 / ( (double)(i) * (double)( i + 2 ) );\n        }\n        return result;\n    }\n    \n上述示例中，三个程序表面不同，但是程序包含的逻辑（对于不同序列进行求和）是相同的。对于计算机程序，这种类似就意味着抽象，进行更高层次的抽象，以较少重复劳动，减小出现错误的风险。\n\n上述代码可以抽象为：\n\n    //advanced abstraction\n    template < class T, class F, class G >\n    T sumGeneric( T a, T b, F func, G next ){\n        T result( 0 );\n        for ( T i = a; i <= b; next( i ) ) {\n            result += func( i ); \n        }\n        return result;\n    }\n\n上述代码，允许用户将循环体内的过程func和nex以参数的形式传入。只要它们能以函数的形式调用即可，在C++中，我们可以使用函数对象做到这一点。\n\n**实现如下：**\n\n    template < class T >\n    class Self{\n    public:\n        T operator()( T x ){ return x;  }\n    };\n    \n    template < class T >\n    class Cube{\n    public:\n        T operator()( T x ){ return x*x*x; }\n    };\n    \n    template< class T >\n    class MyFunc{\n    public:\n        T operator()( T x ){\n            return 1 / ( x * ( x + 2 ) );\n        }\n    };\n    \n    template < class T >\n    class Inc{\n    public:\n        void operator()( T& x ){ ++x; }\n    };\n    \n    template < class T >\n    class Inc4{\n    public:\n        void operator()( T& x ){ x += 4; }\n    };\n    \n**测试结果：**\n\n    int main(){\n        cout << \"Normal Cal:\" << endl;\n        cout << \"sumInt( 1, 50 ):\" << sumInt( 1, 50 ) << \" sumCube( 1, 50 ):\" << sumCube( 1, 50 ) << \" sumPi( 1, 50 ):\" << sumPi( 1, 50 );\n    \n        cout << endl << \"High Order Function:\" << endl;\n        cout << \"sumInt( 1, 50 ):\" << sumGeneric( 1, 50, Self<int>(), Inc<int>() ) \n            << \" sumCube( 1, 50 ):\" << sumGeneric( 1, 50, Cube<int>(), Inc<int>() )\n            << \" sumPi( 1, 50 ):\" << sumGeneric( (double)1, (double)50, MyFunc<double>(), Inc4<double>() );\n    \n        system( \"pause\" );\n    }\n    \n![结果](http://i.imgur.com/nvvFPya.png)\n\n### lambda表达式实现高阶函数\n\n> C++11在语言中加入了lambda表达式，我们可以借助与lambda表达式实现高阶函数。\n\n参看我的博文C++ lambda表达式\n\n代码下载地址：\nhttps://github.com/bjut-hz/High-Order-Function","slug":"C++ 高阶函数","published":1,"updated":"2018-01-05T15:42:33.357Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc31sar10008sotdz0jgymdi","content":"<blockquote>\n<p>函数式编程有很多优点，详情可以参考我的博文卡马克：《用C++ 进行函数式编程》。在C++中，我们可以借助于函数对象或者函数指针来实现高阶函数。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h4 id=\"高阶函数是至少满足下列一个条件的函数\"><a href=\"#高阶函数是至少满足下列一个条件的函数\" class=\"headerlink\" title=\"高阶函数是至少满足下列一个条件的函数:\"></a>高阶函数是至少满足下列一个条件的函数:</h4><ul>\n<li>接受一个或多个函数作为输入</li>\n<li>输出一个函数</li>\n</ul>\n<h3 id=\"三种求和方式\"><a href=\"#三种求和方式\" class=\"headerlink\" title=\"三种求和方式\"></a>三种求和方式</h3><p><img src=\"http://i.imgur.com/7S95DNV.png\" alt=\"示例\"></p>\n<pre><code>//公式（1）\nint sumInt( int a, int b ){\n    int result { 0 };\n    for ( int i = a; i &lt;= b; ++i ) {\n        result += i;\n    }\n    return result;\n}\n\n//公式（2）\nint sumCube( int a, int b ){\n    int result { 0 };\n    for ( int i = a; i &lt;= b; ++i ) {\n        result += i * i * i;\n    }\n    return result;\n}\n\n//公式（3）\ndouble sumPi( int a, int b ){\n    double result = 0;\n    for ( int i = 1; i &lt;= b; i += 4 ) {\n        result += 1 / ( (double)(i) * (double)( i + 2 ) );\n    }\n    return result;\n}\n</code></pre><p>上述示例中，三个程序表面不同，但是程序包含的逻辑（对于不同序列进行求和）是相同的。对于计算机程序，这种类似就意味着抽象，进行更高层次的抽象，以较少重复劳动，减小出现错误的风险。</p>\n<p>上述代码可以抽象为：</p>\n<pre><code>//advanced abstraction\ntemplate &lt; class T, class F, class G &gt;\nT sumGeneric( T a, T b, F func, G next ){\n    T result( 0 );\n    for ( T i = a; i &lt;= b; next( i ) ) {\n        result += func( i ); \n    }\n    return result;\n}\n</code></pre><p>上述代码，允许用户将循环体内的过程func和nex以参数的形式传入。只要它们能以函数的形式调用即可，在C++中，我们可以使用函数对象做到这一点。</p>\n<p><strong>实现如下：</strong></p>\n<pre><code>template &lt; class T &gt;\nclass Self{\npublic:\n    T operator()( T x ){ return x;  }\n};\n\ntemplate &lt; class T &gt;\nclass Cube{\npublic:\n    T operator()( T x ){ return x*x*x; }\n};\n\ntemplate&lt; class T &gt;\nclass MyFunc{\npublic:\n    T operator()( T x ){\n        return 1 / ( x * ( x + 2 ) );\n    }\n};\n\ntemplate &lt; class T &gt;\nclass Inc{\npublic:\n    void operator()( T&amp; x ){ ++x; }\n};\n\ntemplate &lt; class T &gt;\nclass Inc4{\npublic:\n    void operator()( T&amp; x ){ x += 4; }\n};\n</code></pre><p><strong>测试结果：</strong></p>\n<pre><code>int main(){\n    cout &lt;&lt; &quot;Normal Cal:&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;sumInt( 1, 50 ):&quot; &lt;&lt; sumInt( 1, 50 ) &lt;&lt; &quot; sumCube( 1, 50 ):&quot; &lt;&lt; sumCube( 1, 50 ) &lt;&lt; &quot; sumPi( 1, 50 ):&quot; &lt;&lt; sumPi( 1, 50 );\n\n    cout &lt;&lt; endl &lt;&lt; &quot;High Order Function:&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;sumInt( 1, 50 ):&quot; &lt;&lt; sumGeneric( 1, 50, Self&lt;int&gt;(), Inc&lt;int&gt;() ) \n        &lt;&lt; &quot; sumCube( 1, 50 ):&quot; &lt;&lt; sumGeneric( 1, 50, Cube&lt;int&gt;(), Inc&lt;int&gt;() )\n        &lt;&lt; &quot; sumPi( 1, 50 ):&quot; &lt;&lt; sumGeneric( (double)1, (double)50, MyFunc&lt;double&gt;(), Inc4&lt;double&gt;() );\n\n    system( &quot;pause&quot; );\n}\n</code></pre><p><img src=\"http://i.imgur.com/nvvFPya.png\" alt=\"结果\"></p>\n<h3 id=\"lambda表达式实现高阶函数\"><a href=\"#lambda表达式实现高阶函数\" class=\"headerlink\" title=\"lambda表达式实现高阶函数\"></a>lambda表达式实现高阶函数</h3><blockquote>\n<p>C++11在语言中加入了lambda表达式，我们可以借助与lambda表达式实现高阶函数。</p>\n</blockquote>\n<p>参看我的博文C++ lambda表达式</p>\n<p>代码下载地址：<br><a href=\"https://github.com/bjut-hz/High-Order-Function\" target=\"_blank\" rel=\"noopener\">https://github.com/bjut-hz/High-Order-Function</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>函数式编程有很多优点，详情可以参考我的博文卡马克：《用C++ 进行函数式编程》。在C++中，我们可以借助于函数对象或者函数指针来实现高阶函数。</p>\n</blockquote>","more":"<h4 id=\"高阶函数是至少满足下列一个条件的函数\"><a href=\"#高阶函数是至少满足下列一个条件的函数\" class=\"headerlink\" title=\"高阶函数是至少满足下列一个条件的函数:\"></a>高阶函数是至少满足下列一个条件的函数:</h4><ul>\n<li>接受一个或多个函数作为输入</li>\n<li>输出一个函数</li>\n</ul>\n<h3 id=\"三种求和方式\"><a href=\"#三种求和方式\" class=\"headerlink\" title=\"三种求和方式\"></a>三种求和方式</h3><p><img src=\"http://i.imgur.com/7S95DNV.png\" alt=\"示例\"></p>\n<pre><code>//公式（1）\nint sumInt( int a, int b ){\n    int result { 0 };\n    for ( int i = a; i &lt;= b; ++i ) {\n        result += i;\n    }\n    return result;\n}\n\n//公式（2）\nint sumCube( int a, int b ){\n    int result { 0 };\n    for ( int i = a; i &lt;= b; ++i ) {\n        result += i * i * i;\n    }\n    return result;\n}\n\n//公式（3）\ndouble sumPi( int a, int b ){\n    double result = 0;\n    for ( int i = 1; i &lt;= b; i += 4 ) {\n        result += 1 / ( (double)(i) * (double)( i + 2 ) );\n    }\n    return result;\n}\n</code></pre><p>上述示例中，三个程序表面不同，但是程序包含的逻辑（对于不同序列进行求和）是相同的。对于计算机程序，这种类似就意味着抽象，进行更高层次的抽象，以较少重复劳动，减小出现错误的风险。</p>\n<p>上述代码可以抽象为：</p>\n<pre><code>//advanced abstraction\ntemplate &lt; class T, class F, class G &gt;\nT sumGeneric( T a, T b, F func, G next ){\n    T result( 0 );\n    for ( T i = a; i &lt;= b; next( i ) ) {\n        result += func( i ); \n    }\n    return result;\n}\n</code></pre><p>上述代码，允许用户将循环体内的过程func和nex以参数的形式传入。只要它们能以函数的形式调用即可，在C++中，我们可以使用函数对象做到这一点。</p>\n<p><strong>实现如下：</strong></p>\n<pre><code>template &lt; class T &gt;\nclass Self{\npublic:\n    T operator()( T x ){ return x;  }\n};\n\ntemplate &lt; class T &gt;\nclass Cube{\npublic:\n    T operator()( T x ){ return x*x*x; }\n};\n\ntemplate&lt; class T &gt;\nclass MyFunc{\npublic:\n    T operator()( T x ){\n        return 1 / ( x * ( x + 2 ) );\n    }\n};\n\ntemplate &lt; class T &gt;\nclass Inc{\npublic:\n    void operator()( T&amp; x ){ ++x; }\n};\n\ntemplate &lt; class T &gt;\nclass Inc4{\npublic:\n    void operator()( T&amp; x ){ x += 4; }\n};\n</code></pre><p><strong>测试结果：</strong></p>\n<pre><code>int main(){\n    cout &lt;&lt; &quot;Normal Cal:&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;sumInt( 1, 50 ):&quot; &lt;&lt; sumInt( 1, 50 ) &lt;&lt; &quot; sumCube( 1, 50 ):&quot; &lt;&lt; sumCube( 1, 50 ) &lt;&lt; &quot; sumPi( 1, 50 ):&quot; &lt;&lt; sumPi( 1, 50 );\n\n    cout &lt;&lt; endl &lt;&lt; &quot;High Order Function:&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;sumInt( 1, 50 ):&quot; &lt;&lt; sumGeneric( 1, 50, Self&lt;int&gt;(), Inc&lt;int&gt;() ) \n        &lt;&lt; &quot; sumCube( 1, 50 ):&quot; &lt;&lt; sumGeneric( 1, 50, Cube&lt;int&gt;(), Inc&lt;int&gt;() )\n        &lt;&lt; &quot; sumPi( 1, 50 ):&quot; &lt;&lt; sumGeneric( (double)1, (double)50, MyFunc&lt;double&gt;(), Inc4&lt;double&gt;() );\n\n    system( &quot;pause&quot; );\n}\n</code></pre><p><img src=\"http://i.imgur.com/nvvFPya.png\" alt=\"结果\"></p>\n<h3 id=\"lambda表达式实现高阶函数\"><a href=\"#lambda表达式实现高阶函数\" class=\"headerlink\" title=\"lambda表达式实现高阶函数\"></a>lambda表达式实现高阶函数</h3><blockquote>\n<p>C++11在语言中加入了lambda表达式，我们可以借助与lambda表达式实现高阶函数。</p>\n</blockquote>\n<p>参看我的博文C++ lambda表达式</p>\n<p>代码下载地址：<br><a href=\"https://github.com/bjut-hz/High-Order-Function\" target=\"_blank\" rel=\"noopener\">https://github.com/bjut-hz/High-Order-Function</a></p>"},{"title":"卡马克：用C++进行函数式编程","date":"2016-04-05T14:49:04.000Z","_content":"\n\n> John Carmack，ID software创始人，这篇文章是John Carmack对函数式编程的一些看法。\n\n\n**导读：**《Quake》作者 John Carmack (卡马克) 认为追求函数式编程的程序设计有着实实在在的价值，然而，劝说所有程序员抛弃他们的C++编译器，转而启用Lisp、Haskell，或者干脆说任何其他边缘语言，都是不负责任的。\n<!-- more -->\n或许本文的每位读者都听说过，当初“函数式编程”（Functional Programming）肩负着为软件开发带来福祉的期望来到这个世界，大家可能还听说过有人将它奉为软件开发的银弹。然而，上维基百科查看更多信息却让人大倒胃口，一上来就引用λ演算和形式系统。很难一眼看出这跟编写更好的软件有什么关系。\n\n我的实效性总结：软件开发中的大部分问题都缘于程序员没有完全理解程序执行中所有可能的状态。在多线程环境中，这一理解的缺失以及它所导致的问题变得更加严重，如果你留意这些问题，会发现它几乎严重到令人恐慌的地步。通过函数式的风格编写程序，可以将状态清晰地呈现给你的代码，从而使代码的逻辑更易于推理，而在纯粹的函数式系统中，这更使得线程竞争条件成为不可能的事情。\n\n我确实相信追求函数式的程序设计有着实实在在的价值，然而劝说所有程序员抛弃C++编译器，转而启用Lisp、Haskell，或者干脆说任何其他边缘语言，那是不负责任的。让语言设计者永远懊恼的是，总会有大量的外在因素压跨一门语言的好处，相对大多数领域来说，游戏开发尤其如此。除了大家都要面对的遗留代码库和有限的人力资源问题之外，我们还有跨平台问题、私有工具链、证书网关、需要授权的技术，以及严酷的性能要求。\n\n如果你的工作环境中可以用非主流语言完成主要开发任务，那应该为你欢呼，不过也等着打板子吧，罪名是项目进展方面的。而对所有其他人：不论你用何种语言工作，通过函数式的风格编写程序都会带来好处。任何时候，只要方便，就应当这么做；而不方便时，也应当仔细想想自己的决定。以后，只要愿意，你可以学学lambda、monad、currying、在无限集上合成懒惰式求值的函数，以及显式面向函数式语言的所有其他方面。\n\nC++语言并不鼓励函数式程序设计，但它也不妨碍你这么做，而且为你保留了深入下层、运用SIMD内在函数基于内存映射文件直接布局数据的能力，或任何其他你发现自己用得着的精华特性。\n\n![image](http://jbcdn2.b0.upaiyun.com/2012/07/John-Carmack-in-space.jpg)\n\n### 纯函数\n\n纯函数是这样一种函数：它只会查看传进来的参数，它的全部行为就是返回基于参数计算出的一个或多个值。它没有逻辑副作用。这当然只是一种抽象；在CPU层面，每个函数都是有副作用的，多数函数在堆的层面上就有副作用，但这一抽象仍然有价值。\n\n纯函数不查看也不更新全局状态，不维护内部状态，不执行任何I/O操作，也不更改任何输入参数。最好不要传递任何无关的数据给它——如果传一个allMyGlobals指针进来，这一目标就基本破灭了。\n\n纯函数有许多良好的属性。\n\n- **线程安**全 使用值参数的纯函数是彻底线程安全的。使用引用或指针参数的话，就算是const的，你也应当知晓一个执行非纯操作的线程可能更改或释放其数据的风险。但即便是这种情况，纯函数仍不失为编写安全多线程代码的利器。你可以轻松地将一个纯函数替换为并行实现，或者运行多种实现并比较结果。这让代码的试验和演化都更加便利。\n\n- **可测试性** 纯函数具有引用透明性（referential transparency），也就是说，不论何时调用它，对于同一组参数它永远给出同样的结果，这使它跟那些与其他系统相互交织的东西比起来更易于使用。在编写测试代码的问题上，我从来没有特别尽责；太多代码与大量系统交互，以至于使用它们需要相当精细的控制，而我常常能够说服自己（也许不正确）这样的付出并不值得。纯函数很容易测试，其测试代码就像直接从教料书上摘抄下来的一样：构造一些输入并查看结果。每次遇到一小段目前看起来有些奇技淫巧的代码，我都会把它拆成一个单独的纯函数并编写测试。可怕的是，我常常发现这样的代码中存在问题，意味着我撒下的测试安全网还不够大。\n\n- **可理解性与可维护性** 输入和输出的限制使得纯函数在需要时更易于重新学习，由于文档不足而隐藏了外部信息的情况也会更少。\n\n形式系统和软件的自动推理将来会越来越重要。静态代码分析今天已经很重要了，将代码转换成更加函数式的风格有助于工具对它的分析，或者至少能让速度更快的局部工具所覆盖的问题跟速度慢且更加昂贵的全局工具一样多。我们这个行业讲的是“把事情做出来”，我还看不到关于整个程序“正确性”的形式证明能成为切实的目标，但能够证明代码的特定部分不存在特定种类的问题也是很有价值的。我们可以在开发过程中多运用一些科学和数学成果。\n\n正在修编程导论课的同学可能一边挠头一边想：“不是所有的程序都要这么写吗？”现实情况却是“大泥球”（Big Balls of Mud）程序多，架构清晰的程序少。传统的命令式编程语言为你提供了安全舱口，结果它们就总是被使用。如果你只是写一些用一下就扔掉的代码，那就怎么方便怎么来，用到全局状态也是常事。如果你在编写一年之后仍将使用的代码，那就要将眼前的便利因素跟日后不可避免的麻烦平衡一下了。大部分程序员都不擅长预测日后改动代码将会导致的各种痛苦。\n\n### “纯粹性”实践\n\n并非所有东西都可以是纯的，除非程序只操作自己的代码，否则到某个点总要与外部世界交互。尝试最大限度地推进代码的纯粹性可以带来难以想象的乐趣，然而，要达到一个务实的临界点，我们需要承认副作用到某一刻是必要的，然后有效地管理它们。\n\n即使对某个特定的函数而言，这都不是一个“要么全有要么全无”的目标。随着一个函数的纯度不断提高，其价值可以连续增大，而且从“几乎纯粹”到“完全纯粹”带来的价值要低于从“意大利面条状态”到“基本纯粹”带来的价值。只要让函数朝着纯粹的目标前进，即使不能达到完全的纯度，也能改善你的代码。增减全局计数器或检查一个全局调试标志的函数是不纯的，但如果那是它唯一的不足，它仍然可以收获函数式的大部分好处。\n\n避免在更大的上下文中造成最坏的结果通常比在有限的情形中达到完美状态更加重要。考虑一下你曾经对付过的最令人不爽的函数或系统，那种只有全副武装才能应付的，几乎可以确定，其中必有复杂的状态网络和代码行为所依赖的各种假设，而这些复杂性还不只发生在参数上。在这些方面强化一下约束，或至少努力防止更多的代码陷入类似的混乱局面，带来的影响将比挤压几个底层的数学函数大得多。\n\n朝着纯粹性的目标重构代码，这一过程通常包含将计算从它所运行的环境中解脱出来，这几乎必然意味着更多的参数传递。似乎有点奇特——编程语言中的烦琐累赘已被人骂够了，而函数式编程却常常与代码体积的减少相关。函数式编程语言写的程序会比命令式语言的实现更加简洁，其中的因素与使用纯函数在很大程度上是正交的，这些因素包括垃圾回收、强大的内建类型、模式匹配、列表推导、函数合成以及各种语法糖等。程序体积的减少多半与函数式无关，某些命令式语言也能带来同样的效果。\n\n如果你必须给一个函数传递十多个参数，恼火是应该的，你可以通过一些降低参数复杂性的方法来重构代码。C++中没有任何维护函数纯粹性的语言支持，这确实不太理想。如果有人通过一些不好的方法把一个大量使用的基础函数变得不再纯粹，所有使用这一函数的代码便统统失去了纯粹性。从形式系统的角度听起来这是灾难性的，但还是那句话，这并不是一念之恶便与佛无缘的那种“要么全有要么全无”的主张。很遗憾，大规模软件开发中的问题只能是统计意义上的。\n\n看来未来的C/C++语言标准很有必要增加一个“pure”关键字。C++中已经有了一个近似的关键字const—一个支持编译时检查程序员意图的可选修饰符，加上它对代码百利而无一害。D语言倒是提供了一个“pure”关键字：http://www.d-programming-language.org/function.html。注意它们对弱纯粹性和强纯粹性的区分—要达到强纯粹，输入参数中的引用或指针需要使用const修饰。\n\n从某些方面来看，语言关键字过于严格了—一个函数即使调用了非纯粹的函数也仍然可以是纯粹的，只要副作用不逃出函数之外即可。如果一个程序只处理命令行参数而不操作随机的文件系统状态，那么整个程序都可看做纯粹的函数式单元。\n\n### 面向对象程序设计\n\nMichael Feathers（twitter @mfeathers）说：OO通过把移动的部件封装起来使代码可理解。FP通过把移动的部件减到最少使代码可理解。\n\n“移动的部件”就是更改中的状态。通知一个对象改变自己，这是面向对象编程基础教材的第一课，在大多数程序员的观念中根深蒂固，但它却是一种反函数式的行为。将函数和它们操作的数据结构组织在一起，这一基本的OOP思想显然有其价值，但如果想在自己的部分代码中获得函数式编程的好处，那么在这些部分，你必须疏远一下某些面向对象的行为。\n\n无法声明为const的类方法从定义上就是不纯的，因为它们要修改对象的部分或全部状态集合，这一集合可能十分庞大。它们也不是线程安全的，这里戳一下，那里捅一下，一点一点地把对象置成了非预期的状态，这种力量才真正是Bug的不竭之源。如果不考虑那个隐含的const this指针，从技术角度const对象方法仍可看做纯函数，但许多对象十分庞大，大到它本身就足以构成一种全局状态，从而弱化了纯函数的在简洁清晰上的一些好处。构造函数也可以是纯函数，通常应该努力使之成为纯函数——它们接受参数并返回一个对象。\n\n从灵活编程的层面来看，你常常可以用更加函数式的方法使用对象，但可能需要一点接口上的改变。在id Software，我们曾有十年时间在使用一个idVec3类，它只有一个改变自己的void Normalize()方法，却没有相应的idVec3 Normalized() const方法。许多字符串方法也是以类似的方式定义的，它们操作自身，而不是返回执行过相应操作的一个新的副本——比如ToLowerCase()、StripFileExtension()等。\n\n### 性能影响\n\n在任何情况下，直接修改内存块几乎都是无法逾越的最优方案，而不这么做就难免牺牲性能。多数时候这只有理论上的好处，我们一向都在用性能换生产率。\n\n使用纯函数编程会导致更多的数据复制，出于性能方面的考虑，某些情况下这显然会成为不正确的实现策略。举个极端的例子，你可以写一个纯函数的DrawTriangle()，接受一个帧缓存（framebuffer）参数并返回一个全新的画上三角形的帧缓存作为结果。可别这么做。\n\n按值返回一切结果是自然的函数式编程风格，然而总是依靠编译器实施返回值优化会对性能造成危害，因此对于函数输出的复杂数据结构，传递引用参数常常是合理的，但这么也有不好的一面：它阻止你将返回值声明为const以避免多次赋值。\n\n很多时候人们都有强烈的欲望去更新传入的复杂结构中的某个值，而不是复制一份副本并返回修改后的版本，但这样等于舍弃了线程安全保障，因此不要轻易这么做。列表的产生倒是一种可以考虑就地更新的合理情形。往列表中追加新的元素，纯函数式的做法是返回尾端包含新元素的一个全新列表副本，原先的列表则保持不变。真正的函数式语言都在实现上运用了特别手法，从而使这种行为的后果没有听上去那么糟糕，但如果在典型的C++容器上这么做，那你就死定了。\n\n一项重要的缓解因素是，如今性能意味着并行程序设计，相比单线程环境，并行程序即使在性能最优的情形中也需要更多的复制与合并操作，因此复制造成的损失减少了，而复杂性的降低和正确性的提高这两方面的好处相应增加了。例如，当开始考虑并行地运行一个游戏世界中的所有角色时，你就会渐渐明白，用面向对象的方法来更新对象，这在并行环境中难度很大。或许所有对象都引用了世界状态的一个只读版本，而在一帧结束时却复制了更新后的版本……嗨，等一下……\n\n### 如何行动\n\n在自己的代码库中检查某些有一定复杂度的函数，跟踪它能触及的每一比特外部状态以及所有可能的状态更新。即使对它不做一点改动，把这些信息放入一个注释块就已经是极好的文档了。如果函数能够——比方说，通过渲染系统触发一次屏幕刷新，你就可以直接把手举在空中，声明这个函数所有的正副作用已经超出了人类的理解力。你要着手的下一项任务是基于实际执行的计算从头开始重新考虑这个函数。收集所有的输入，把它传给一个纯函数，然后接收结果并做相应处理。\n\n调试代码的时候，让自己着重了解那些更新的状态和隐藏的参数悄然登场，从而掩盖实际动作的部分。修改一些工具对象的代码，让函数返回新的副本而不是修改自身，除了迭代器，试着在自己使用的每个变量之前都加上const。","source":"_posts/卡马克：用C++进行函数式编程.md","raw":"---\ntitle: 卡马克：用C++进行函数式编程\ndate: 2016-04-05 22:49:04\ncategories:\n- C++\ntags: \n- C++\n- 函数式编程\n---\n\n\n> John Carmack，ID software创始人，这篇文章是John Carmack对函数式编程的一些看法。\n\n\n**导读：**《Quake》作者 John Carmack (卡马克) 认为追求函数式编程的程序设计有着实实在在的价值，然而，劝说所有程序员抛弃他们的C++编译器，转而启用Lisp、Haskell，或者干脆说任何其他边缘语言，都是不负责任的。\n<!-- more -->\n或许本文的每位读者都听说过，当初“函数式编程”（Functional Programming）肩负着为软件开发带来福祉的期望来到这个世界，大家可能还听说过有人将它奉为软件开发的银弹。然而，上维基百科查看更多信息却让人大倒胃口，一上来就引用λ演算和形式系统。很难一眼看出这跟编写更好的软件有什么关系。\n\n我的实效性总结：软件开发中的大部分问题都缘于程序员没有完全理解程序执行中所有可能的状态。在多线程环境中，这一理解的缺失以及它所导致的问题变得更加严重，如果你留意这些问题，会发现它几乎严重到令人恐慌的地步。通过函数式的风格编写程序，可以将状态清晰地呈现给你的代码，从而使代码的逻辑更易于推理，而在纯粹的函数式系统中，这更使得线程竞争条件成为不可能的事情。\n\n我确实相信追求函数式的程序设计有着实实在在的价值，然而劝说所有程序员抛弃C++编译器，转而启用Lisp、Haskell，或者干脆说任何其他边缘语言，那是不负责任的。让语言设计者永远懊恼的是，总会有大量的外在因素压跨一门语言的好处，相对大多数领域来说，游戏开发尤其如此。除了大家都要面对的遗留代码库和有限的人力资源问题之外，我们还有跨平台问题、私有工具链、证书网关、需要授权的技术，以及严酷的性能要求。\n\n如果你的工作环境中可以用非主流语言完成主要开发任务，那应该为你欢呼，不过也等着打板子吧，罪名是项目进展方面的。而对所有其他人：不论你用何种语言工作，通过函数式的风格编写程序都会带来好处。任何时候，只要方便，就应当这么做；而不方便时，也应当仔细想想自己的决定。以后，只要愿意，你可以学学lambda、monad、currying、在无限集上合成懒惰式求值的函数，以及显式面向函数式语言的所有其他方面。\n\nC++语言并不鼓励函数式程序设计，但它也不妨碍你这么做，而且为你保留了深入下层、运用SIMD内在函数基于内存映射文件直接布局数据的能力，或任何其他你发现自己用得着的精华特性。\n\n![image](http://jbcdn2.b0.upaiyun.com/2012/07/John-Carmack-in-space.jpg)\n\n### 纯函数\n\n纯函数是这样一种函数：它只会查看传进来的参数，它的全部行为就是返回基于参数计算出的一个或多个值。它没有逻辑副作用。这当然只是一种抽象；在CPU层面，每个函数都是有副作用的，多数函数在堆的层面上就有副作用，但这一抽象仍然有价值。\n\n纯函数不查看也不更新全局状态，不维护内部状态，不执行任何I/O操作，也不更改任何输入参数。最好不要传递任何无关的数据给它——如果传一个allMyGlobals指针进来，这一目标就基本破灭了。\n\n纯函数有许多良好的属性。\n\n- **线程安**全 使用值参数的纯函数是彻底线程安全的。使用引用或指针参数的话，就算是const的，你也应当知晓一个执行非纯操作的线程可能更改或释放其数据的风险。但即便是这种情况，纯函数仍不失为编写安全多线程代码的利器。你可以轻松地将一个纯函数替换为并行实现，或者运行多种实现并比较结果。这让代码的试验和演化都更加便利。\n\n- **可测试性** 纯函数具有引用透明性（referential transparency），也就是说，不论何时调用它，对于同一组参数它永远给出同样的结果，这使它跟那些与其他系统相互交织的东西比起来更易于使用。在编写测试代码的问题上，我从来没有特别尽责；太多代码与大量系统交互，以至于使用它们需要相当精细的控制，而我常常能够说服自己（也许不正确）这样的付出并不值得。纯函数很容易测试，其测试代码就像直接从教料书上摘抄下来的一样：构造一些输入并查看结果。每次遇到一小段目前看起来有些奇技淫巧的代码，我都会把它拆成一个单独的纯函数并编写测试。可怕的是，我常常发现这样的代码中存在问题，意味着我撒下的测试安全网还不够大。\n\n- **可理解性与可维护性** 输入和输出的限制使得纯函数在需要时更易于重新学习，由于文档不足而隐藏了外部信息的情况也会更少。\n\n形式系统和软件的自动推理将来会越来越重要。静态代码分析今天已经很重要了，将代码转换成更加函数式的风格有助于工具对它的分析，或者至少能让速度更快的局部工具所覆盖的问题跟速度慢且更加昂贵的全局工具一样多。我们这个行业讲的是“把事情做出来”，我还看不到关于整个程序“正确性”的形式证明能成为切实的目标，但能够证明代码的特定部分不存在特定种类的问题也是很有价值的。我们可以在开发过程中多运用一些科学和数学成果。\n\n正在修编程导论课的同学可能一边挠头一边想：“不是所有的程序都要这么写吗？”现实情况却是“大泥球”（Big Balls of Mud）程序多，架构清晰的程序少。传统的命令式编程语言为你提供了安全舱口，结果它们就总是被使用。如果你只是写一些用一下就扔掉的代码，那就怎么方便怎么来，用到全局状态也是常事。如果你在编写一年之后仍将使用的代码，那就要将眼前的便利因素跟日后不可避免的麻烦平衡一下了。大部分程序员都不擅长预测日后改动代码将会导致的各种痛苦。\n\n### “纯粹性”实践\n\n并非所有东西都可以是纯的，除非程序只操作自己的代码，否则到某个点总要与外部世界交互。尝试最大限度地推进代码的纯粹性可以带来难以想象的乐趣，然而，要达到一个务实的临界点，我们需要承认副作用到某一刻是必要的，然后有效地管理它们。\n\n即使对某个特定的函数而言，这都不是一个“要么全有要么全无”的目标。随着一个函数的纯度不断提高，其价值可以连续增大，而且从“几乎纯粹”到“完全纯粹”带来的价值要低于从“意大利面条状态”到“基本纯粹”带来的价值。只要让函数朝着纯粹的目标前进，即使不能达到完全的纯度，也能改善你的代码。增减全局计数器或检查一个全局调试标志的函数是不纯的，但如果那是它唯一的不足，它仍然可以收获函数式的大部分好处。\n\n避免在更大的上下文中造成最坏的结果通常比在有限的情形中达到完美状态更加重要。考虑一下你曾经对付过的最令人不爽的函数或系统，那种只有全副武装才能应付的，几乎可以确定，其中必有复杂的状态网络和代码行为所依赖的各种假设，而这些复杂性还不只发生在参数上。在这些方面强化一下约束，或至少努力防止更多的代码陷入类似的混乱局面，带来的影响将比挤压几个底层的数学函数大得多。\n\n朝着纯粹性的目标重构代码，这一过程通常包含将计算从它所运行的环境中解脱出来，这几乎必然意味着更多的参数传递。似乎有点奇特——编程语言中的烦琐累赘已被人骂够了，而函数式编程却常常与代码体积的减少相关。函数式编程语言写的程序会比命令式语言的实现更加简洁，其中的因素与使用纯函数在很大程度上是正交的，这些因素包括垃圾回收、强大的内建类型、模式匹配、列表推导、函数合成以及各种语法糖等。程序体积的减少多半与函数式无关，某些命令式语言也能带来同样的效果。\n\n如果你必须给一个函数传递十多个参数，恼火是应该的，你可以通过一些降低参数复杂性的方法来重构代码。C++中没有任何维护函数纯粹性的语言支持，这确实不太理想。如果有人通过一些不好的方法把一个大量使用的基础函数变得不再纯粹，所有使用这一函数的代码便统统失去了纯粹性。从形式系统的角度听起来这是灾难性的，但还是那句话，这并不是一念之恶便与佛无缘的那种“要么全有要么全无”的主张。很遗憾，大规模软件开发中的问题只能是统计意义上的。\n\n看来未来的C/C++语言标准很有必要增加一个“pure”关键字。C++中已经有了一个近似的关键字const—一个支持编译时检查程序员意图的可选修饰符，加上它对代码百利而无一害。D语言倒是提供了一个“pure”关键字：http://www.d-programming-language.org/function.html。注意它们对弱纯粹性和强纯粹性的区分—要达到强纯粹，输入参数中的引用或指针需要使用const修饰。\n\n从某些方面来看，语言关键字过于严格了—一个函数即使调用了非纯粹的函数也仍然可以是纯粹的，只要副作用不逃出函数之外即可。如果一个程序只处理命令行参数而不操作随机的文件系统状态，那么整个程序都可看做纯粹的函数式单元。\n\n### 面向对象程序设计\n\nMichael Feathers（twitter @mfeathers）说：OO通过把移动的部件封装起来使代码可理解。FP通过把移动的部件减到最少使代码可理解。\n\n“移动的部件”就是更改中的状态。通知一个对象改变自己，这是面向对象编程基础教材的第一课，在大多数程序员的观念中根深蒂固，但它却是一种反函数式的行为。将函数和它们操作的数据结构组织在一起，这一基本的OOP思想显然有其价值，但如果想在自己的部分代码中获得函数式编程的好处，那么在这些部分，你必须疏远一下某些面向对象的行为。\n\n无法声明为const的类方法从定义上就是不纯的，因为它们要修改对象的部分或全部状态集合，这一集合可能十分庞大。它们也不是线程安全的，这里戳一下，那里捅一下，一点一点地把对象置成了非预期的状态，这种力量才真正是Bug的不竭之源。如果不考虑那个隐含的const this指针，从技术角度const对象方法仍可看做纯函数，但许多对象十分庞大，大到它本身就足以构成一种全局状态，从而弱化了纯函数的在简洁清晰上的一些好处。构造函数也可以是纯函数，通常应该努力使之成为纯函数——它们接受参数并返回一个对象。\n\n从灵活编程的层面来看，你常常可以用更加函数式的方法使用对象，但可能需要一点接口上的改变。在id Software，我们曾有十年时间在使用一个idVec3类，它只有一个改变自己的void Normalize()方法，却没有相应的idVec3 Normalized() const方法。许多字符串方法也是以类似的方式定义的，它们操作自身，而不是返回执行过相应操作的一个新的副本——比如ToLowerCase()、StripFileExtension()等。\n\n### 性能影响\n\n在任何情况下，直接修改内存块几乎都是无法逾越的最优方案，而不这么做就难免牺牲性能。多数时候这只有理论上的好处，我们一向都在用性能换生产率。\n\n使用纯函数编程会导致更多的数据复制，出于性能方面的考虑，某些情况下这显然会成为不正确的实现策略。举个极端的例子，你可以写一个纯函数的DrawTriangle()，接受一个帧缓存（framebuffer）参数并返回一个全新的画上三角形的帧缓存作为结果。可别这么做。\n\n按值返回一切结果是自然的函数式编程风格，然而总是依靠编译器实施返回值优化会对性能造成危害，因此对于函数输出的复杂数据结构，传递引用参数常常是合理的，但这么也有不好的一面：它阻止你将返回值声明为const以避免多次赋值。\n\n很多时候人们都有强烈的欲望去更新传入的复杂结构中的某个值，而不是复制一份副本并返回修改后的版本，但这样等于舍弃了线程安全保障，因此不要轻易这么做。列表的产生倒是一种可以考虑就地更新的合理情形。往列表中追加新的元素，纯函数式的做法是返回尾端包含新元素的一个全新列表副本，原先的列表则保持不变。真正的函数式语言都在实现上运用了特别手法，从而使这种行为的后果没有听上去那么糟糕，但如果在典型的C++容器上这么做，那你就死定了。\n\n一项重要的缓解因素是，如今性能意味着并行程序设计，相比单线程环境，并行程序即使在性能最优的情形中也需要更多的复制与合并操作，因此复制造成的损失减少了，而复杂性的降低和正确性的提高这两方面的好处相应增加了。例如，当开始考虑并行地运行一个游戏世界中的所有角色时，你就会渐渐明白，用面向对象的方法来更新对象，这在并行环境中难度很大。或许所有对象都引用了世界状态的一个只读版本，而在一帧结束时却复制了更新后的版本……嗨，等一下……\n\n### 如何行动\n\n在自己的代码库中检查某些有一定复杂度的函数，跟踪它能触及的每一比特外部状态以及所有可能的状态更新。即使对它不做一点改动，把这些信息放入一个注释块就已经是极好的文档了。如果函数能够——比方说，通过渲染系统触发一次屏幕刷新，你就可以直接把手举在空中，声明这个函数所有的正副作用已经超出了人类的理解力。你要着手的下一项任务是基于实际执行的计算从头开始重新考虑这个函数。收集所有的输入，把它传给一个纯函数，然后接收结果并做相应处理。\n\n调试代码的时候，让自己着重了解那些更新的状态和隐藏的参数悄然登场，从而掩盖实际动作的部分。修改一些工具对象的代码，让函数返回新的副本而不是修改自身，除了迭代器，试着在自己使用的每个变量之前都加上const。","slug":"卡马克：用C++进行函数式编程","published":1,"updated":"2018-01-05T15:39:25.941Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc31sar6000asotd10rcqlup","content":"<blockquote>\n<p>John Carmack，ID software创始人，这篇文章是John Carmack对函数式编程的一些看法。</p>\n</blockquote>\n<p><strong>导读：</strong>《Quake》作者 John Carmack (卡马克) 认为追求函数式编程的程序设计有着实实在在的价值，然而，劝说所有程序员抛弃他们的C++编译器，转而启用Lisp、Haskell，或者干脆说任何其他边缘语言，都是不负责任的。<br><a id=\"more\"></a><br>或许本文的每位读者都听说过，当初“函数式编程”（Functional Programming）肩负着为软件开发带来福祉的期望来到这个世界，大家可能还听说过有人将它奉为软件开发的银弹。然而，上维基百科查看更多信息却让人大倒胃口，一上来就引用λ演算和形式系统。很难一眼看出这跟编写更好的软件有什么关系。</p>\n<p>我的实效性总结：软件开发中的大部分问题都缘于程序员没有完全理解程序执行中所有可能的状态。在多线程环境中，这一理解的缺失以及它所导致的问题变得更加严重，如果你留意这些问题，会发现它几乎严重到令人恐慌的地步。通过函数式的风格编写程序，可以将状态清晰地呈现给你的代码，从而使代码的逻辑更易于推理，而在纯粹的函数式系统中，这更使得线程竞争条件成为不可能的事情。</p>\n<p>我确实相信追求函数式的程序设计有着实实在在的价值，然而劝说所有程序员抛弃C++编译器，转而启用Lisp、Haskell，或者干脆说任何其他边缘语言，那是不负责任的。让语言设计者永远懊恼的是，总会有大量的外在因素压跨一门语言的好处，相对大多数领域来说，游戏开发尤其如此。除了大家都要面对的遗留代码库和有限的人力资源问题之外，我们还有跨平台问题、私有工具链、证书网关、需要授权的技术，以及严酷的性能要求。</p>\n<p>如果你的工作环境中可以用非主流语言完成主要开发任务，那应该为你欢呼，不过也等着打板子吧，罪名是项目进展方面的。而对所有其他人：不论你用何种语言工作，通过函数式的风格编写程序都会带来好处。任何时候，只要方便，就应当这么做；而不方便时，也应当仔细想想自己的决定。以后，只要愿意，你可以学学lambda、monad、currying、在无限集上合成懒惰式求值的函数，以及显式面向函数式语言的所有其他方面。</p>\n<p>C++语言并不鼓励函数式程序设计，但它也不妨碍你这么做，而且为你保留了深入下层、运用SIMD内在函数基于内存映射文件直接布局数据的能力，或任何其他你发现自己用得着的精华特性。</p>\n<p><img src=\"http://jbcdn2.b0.upaiyun.com/2012/07/John-Carmack-in-space.jpg\" alt=\"image\"></p>\n<h3 id=\"纯函数\"><a href=\"#纯函数\" class=\"headerlink\" title=\"纯函数\"></a>纯函数</h3><p>纯函数是这样一种函数：它只会查看传进来的参数，它的全部行为就是返回基于参数计算出的一个或多个值。它没有逻辑副作用。这当然只是一种抽象；在CPU层面，每个函数都是有副作用的，多数函数在堆的层面上就有副作用，但这一抽象仍然有价值。</p>\n<p>纯函数不查看也不更新全局状态，不维护内部状态，不执行任何I/O操作，也不更改任何输入参数。最好不要传递任何无关的数据给它——如果传一个allMyGlobals指针进来，这一目标就基本破灭了。</p>\n<p>纯函数有许多良好的属性。</p>\n<ul>\n<li><p><strong>线程安</strong>全 使用值参数的纯函数是彻底线程安全的。使用引用或指针参数的话，就算是const的，你也应当知晓一个执行非纯操作的线程可能更改或释放其数据的风险。但即便是这种情况，纯函数仍不失为编写安全多线程代码的利器。你可以轻松地将一个纯函数替换为并行实现，或者运行多种实现并比较结果。这让代码的试验和演化都更加便利。</p>\n</li>\n<li><p><strong>可测试性</strong> 纯函数具有引用透明性（referential transparency），也就是说，不论何时调用它，对于同一组参数它永远给出同样的结果，这使它跟那些与其他系统相互交织的东西比起来更易于使用。在编写测试代码的问题上，我从来没有特别尽责；太多代码与大量系统交互，以至于使用它们需要相当精细的控制，而我常常能够说服自己（也许不正确）这样的付出并不值得。纯函数很容易测试，其测试代码就像直接从教料书上摘抄下来的一样：构造一些输入并查看结果。每次遇到一小段目前看起来有些奇技淫巧的代码，我都会把它拆成一个单独的纯函数并编写测试。可怕的是，我常常发现这样的代码中存在问题，意味着我撒下的测试安全网还不够大。</p>\n</li>\n<li><p><strong>可理解性与可维护性</strong> 输入和输出的限制使得纯函数在需要时更易于重新学习，由于文档不足而隐藏了外部信息的情况也会更少。</p>\n</li>\n</ul>\n<p>形式系统和软件的自动推理将来会越来越重要。静态代码分析今天已经很重要了，将代码转换成更加函数式的风格有助于工具对它的分析，或者至少能让速度更快的局部工具所覆盖的问题跟速度慢且更加昂贵的全局工具一样多。我们这个行业讲的是“把事情做出来”，我还看不到关于整个程序“正确性”的形式证明能成为切实的目标，但能够证明代码的特定部分不存在特定种类的问题也是很有价值的。我们可以在开发过程中多运用一些科学和数学成果。</p>\n<p>正在修编程导论课的同学可能一边挠头一边想：“不是所有的程序都要这么写吗？”现实情况却是“大泥球”（Big Balls of Mud）程序多，架构清晰的程序少。传统的命令式编程语言为你提供了安全舱口，结果它们就总是被使用。如果你只是写一些用一下就扔掉的代码，那就怎么方便怎么来，用到全局状态也是常事。如果你在编写一年之后仍将使用的代码，那就要将眼前的便利因素跟日后不可避免的麻烦平衡一下了。大部分程序员都不擅长预测日后改动代码将会导致的各种痛苦。</p>\n<h3 id=\"“纯粹性”实践\"><a href=\"#“纯粹性”实践\" class=\"headerlink\" title=\"“纯粹性”实践\"></a>“纯粹性”实践</h3><p>并非所有东西都可以是纯的，除非程序只操作自己的代码，否则到某个点总要与外部世界交互。尝试最大限度地推进代码的纯粹性可以带来难以想象的乐趣，然而，要达到一个务实的临界点，我们需要承认副作用到某一刻是必要的，然后有效地管理它们。</p>\n<p>即使对某个特定的函数而言，这都不是一个“要么全有要么全无”的目标。随着一个函数的纯度不断提高，其价值可以连续增大，而且从“几乎纯粹”到“完全纯粹”带来的价值要低于从“意大利面条状态”到“基本纯粹”带来的价值。只要让函数朝着纯粹的目标前进，即使不能达到完全的纯度，也能改善你的代码。增减全局计数器或检查一个全局调试标志的函数是不纯的，但如果那是它唯一的不足，它仍然可以收获函数式的大部分好处。</p>\n<p>避免在更大的上下文中造成最坏的结果通常比在有限的情形中达到完美状态更加重要。考虑一下你曾经对付过的最令人不爽的函数或系统，那种只有全副武装才能应付的，几乎可以确定，其中必有复杂的状态网络和代码行为所依赖的各种假设，而这些复杂性还不只发生在参数上。在这些方面强化一下约束，或至少努力防止更多的代码陷入类似的混乱局面，带来的影响将比挤压几个底层的数学函数大得多。</p>\n<p>朝着纯粹性的目标重构代码，这一过程通常包含将计算从它所运行的环境中解脱出来，这几乎必然意味着更多的参数传递。似乎有点奇特——编程语言中的烦琐累赘已被人骂够了，而函数式编程却常常与代码体积的减少相关。函数式编程语言写的程序会比命令式语言的实现更加简洁，其中的因素与使用纯函数在很大程度上是正交的，这些因素包括垃圾回收、强大的内建类型、模式匹配、列表推导、函数合成以及各种语法糖等。程序体积的减少多半与函数式无关，某些命令式语言也能带来同样的效果。</p>\n<p>如果你必须给一个函数传递十多个参数，恼火是应该的，你可以通过一些降低参数复杂性的方法来重构代码。C++中没有任何维护函数纯粹性的语言支持，这确实不太理想。如果有人通过一些不好的方法把一个大量使用的基础函数变得不再纯粹，所有使用这一函数的代码便统统失去了纯粹性。从形式系统的角度听起来这是灾难性的，但还是那句话，这并不是一念之恶便与佛无缘的那种“要么全有要么全无”的主张。很遗憾，大规模软件开发中的问题只能是统计意义上的。</p>\n<p>看来未来的C/C++语言标准很有必要增加一个“pure”关键字。C++中已经有了一个近似的关键字const—一个支持编译时检查程序员意图的可选修饰符，加上它对代码百利而无一害。D语言倒是提供了一个“pure”关键字：<a href=\"http://www.d-programming-language.org/function.html。注意它们对弱纯粹性和强纯粹性的区分—要达到强纯粹，输入参数中的引用或指针需要使用const修饰。\" target=\"_blank\" rel=\"noopener\">http://www.d-programming-language.org/function.html。注意它们对弱纯粹性和强纯粹性的区分—要达到强纯粹，输入参数中的引用或指针需要使用const修饰。</a></p>\n<p>从某些方面来看，语言关键字过于严格了—一个函数即使调用了非纯粹的函数也仍然可以是纯粹的，只要副作用不逃出函数之外即可。如果一个程序只处理命令行参数而不操作随机的文件系统状态，那么整个程序都可看做纯粹的函数式单元。</p>\n<h3 id=\"面向对象程序设计\"><a href=\"#面向对象程序设计\" class=\"headerlink\" title=\"面向对象程序设计\"></a>面向对象程序设计</h3><p>Michael Feathers（twitter @mfeathers）说：OO通过把移动的部件封装起来使代码可理解。FP通过把移动的部件减到最少使代码可理解。</p>\n<p>“移动的部件”就是更改中的状态。通知一个对象改变自己，这是面向对象编程基础教材的第一课，在大多数程序员的观念中根深蒂固，但它却是一种反函数式的行为。将函数和它们操作的数据结构组织在一起，这一基本的OOP思想显然有其价值，但如果想在自己的部分代码中获得函数式编程的好处，那么在这些部分，你必须疏远一下某些面向对象的行为。</p>\n<p>无法声明为const的类方法从定义上就是不纯的，因为它们要修改对象的部分或全部状态集合，这一集合可能十分庞大。它们也不是线程安全的，这里戳一下，那里捅一下，一点一点地把对象置成了非预期的状态，这种力量才真正是Bug的不竭之源。如果不考虑那个隐含的const this指针，从技术角度const对象方法仍可看做纯函数，但许多对象十分庞大，大到它本身就足以构成一种全局状态，从而弱化了纯函数的在简洁清晰上的一些好处。构造函数也可以是纯函数，通常应该努力使之成为纯函数——它们接受参数并返回一个对象。</p>\n<p>从灵活编程的层面来看，你常常可以用更加函数式的方法使用对象，但可能需要一点接口上的改变。在id Software，我们曾有十年时间在使用一个idVec3类，它只有一个改变自己的void Normalize()方法，却没有相应的idVec3 Normalized() const方法。许多字符串方法也是以类似的方式定义的，它们操作自身，而不是返回执行过相应操作的一个新的副本——比如ToLowerCase()、StripFileExtension()等。</p>\n<h3 id=\"性能影响\"><a href=\"#性能影响\" class=\"headerlink\" title=\"性能影响\"></a>性能影响</h3><p>在任何情况下，直接修改内存块几乎都是无法逾越的最优方案，而不这么做就难免牺牲性能。多数时候这只有理论上的好处，我们一向都在用性能换生产率。</p>\n<p>使用纯函数编程会导致更多的数据复制，出于性能方面的考虑，某些情况下这显然会成为不正确的实现策略。举个极端的例子，你可以写一个纯函数的DrawTriangle()，接受一个帧缓存（framebuffer）参数并返回一个全新的画上三角形的帧缓存作为结果。可别这么做。</p>\n<p>按值返回一切结果是自然的函数式编程风格，然而总是依靠编译器实施返回值优化会对性能造成危害，因此对于函数输出的复杂数据结构，传递引用参数常常是合理的，但这么也有不好的一面：它阻止你将返回值声明为const以避免多次赋值。</p>\n<p>很多时候人们都有强烈的欲望去更新传入的复杂结构中的某个值，而不是复制一份副本并返回修改后的版本，但这样等于舍弃了线程安全保障，因此不要轻易这么做。列表的产生倒是一种可以考虑就地更新的合理情形。往列表中追加新的元素，纯函数式的做法是返回尾端包含新元素的一个全新列表副本，原先的列表则保持不变。真正的函数式语言都在实现上运用了特别手法，从而使这种行为的后果没有听上去那么糟糕，但如果在典型的C++容器上这么做，那你就死定了。</p>\n<p>一项重要的缓解因素是，如今性能意味着并行程序设计，相比单线程环境，并行程序即使在性能最优的情形中也需要更多的复制与合并操作，因此复制造成的损失减少了，而复杂性的降低和正确性的提高这两方面的好处相应增加了。例如，当开始考虑并行地运行一个游戏世界中的所有角色时，你就会渐渐明白，用面向对象的方法来更新对象，这在并行环境中难度很大。或许所有对象都引用了世界状态的一个只读版本，而在一帧结束时却复制了更新后的版本……嗨，等一下……</p>\n<h3 id=\"如何行动\"><a href=\"#如何行动\" class=\"headerlink\" title=\"如何行动\"></a>如何行动</h3><p>在自己的代码库中检查某些有一定复杂度的函数，跟踪它能触及的每一比特外部状态以及所有可能的状态更新。即使对它不做一点改动，把这些信息放入一个注释块就已经是极好的文档了。如果函数能够——比方说，通过渲染系统触发一次屏幕刷新，你就可以直接把手举在空中，声明这个函数所有的正副作用已经超出了人类的理解力。你要着手的下一项任务是基于实际执行的计算从头开始重新考虑这个函数。收集所有的输入，把它传给一个纯函数，然后接收结果并做相应处理。</p>\n<p>调试代码的时候，让自己着重了解那些更新的状态和隐藏的参数悄然登场，从而掩盖实际动作的部分。修改一些工具对象的代码，让函数返回新的副本而不是修改自身，除了迭代器，试着在自己使用的每个变量之前都加上const。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>John Carmack，ID software创始人，这篇文章是John Carmack对函数式编程的一些看法。</p>\n</blockquote>\n<p><strong>导读：</strong>《Quake》作者 John Carmack (卡马克) 认为追求函数式编程的程序设计有着实实在在的价值，然而，劝说所有程序员抛弃他们的C++编译器，转而启用Lisp、Haskell，或者干脆说任何其他边缘语言，都是不负责任的。<br>","more":"<br>或许本文的每位读者都听说过，当初“函数式编程”（Functional Programming）肩负着为软件开发带来福祉的期望来到这个世界，大家可能还听说过有人将它奉为软件开发的银弹。然而，上维基百科查看更多信息却让人大倒胃口，一上来就引用λ演算和形式系统。很难一眼看出这跟编写更好的软件有什么关系。</p>\n<p>我的实效性总结：软件开发中的大部分问题都缘于程序员没有完全理解程序执行中所有可能的状态。在多线程环境中，这一理解的缺失以及它所导致的问题变得更加严重，如果你留意这些问题，会发现它几乎严重到令人恐慌的地步。通过函数式的风格编写程序，可以将状态清晰地呈现给你的代码，从而使代码的逻辑更易于推理，而在纯粹的函数式系统中，这更使得线程竞争条件成为不可能的事情。</p>\n<p>我确实相信追求函数式的程序设计有着实实在在的价值，然而劝说所有程序员抛弃C++编译器，转而启用Lisp、Haskell，或者干脆说任何其他边缘语言，那是不负责任的。让语言设计者永远懊恼的是，总会有大量的外在因素压跨一门语言的好处，相对大多数领域来说，游戏开发尤其如此。除了大家都要面对的遗留代码库和有限的人力资源问题之外，我们还有跨平台问题、私有工具链、证书网关、需要授权的技术，以及严酷的性能要求。</p>\n<p>如果你的工作环境中可以用非主流语言完成主要开发任务，那应该为你欢呼，不过也等着打板子吧，罪名是项目进展方面的。而对所有其他人：不论你用何种语言工作，通过函数式的风格编写程序都会带来好处。任何时候，只要方便，就应当这么做；而不方便时，也应当仔细想想自己的决定。以后，只要愿意，你可以学学lambda、monad、currying、在无限集上合成懒惰式求值的函数，以及显式面向函数式语言的所有其他方面。</p>\n<p>C++语言并不鼓励函数式程序设计，但它也不妨碍你这么做，而且为你保留了深入下层、运用SIMD内在函数基于内存映射文件直接布局数据的能力，或任何其他你发现自己用得着的精华特性。</p>\n<p><img src=\"http://jbcdn2.b0.upaiyun.com/2012/07/John-Carmack-in-space.jpg\" alt=\"image\"></p>\n<h3 id=\"纯函数\"><a href=\"#纯函数\" class=\"headerlink\" title=\"纯函数\"></a>纯函数</h3><p>纯函数是这样一种函数：它只会查看传进来的参数，它的全部行为就是返回基于参数计算出的一个或多个值。它没有逻辑副作用。这当然只是一种抽象；在CPU层面，每个函数都是有副作用的，多数函数在堆的层面上就有副作用，但这一抽象仍然有价值。</p>\n<p>纯函数不查看也不更新全局状态，不维护内部状态，不执行任何I/O操作，也不更改任何输入参数。最好不要传递任何无关的数据给它——如果传一个allMyGlobals指针进来，这一目标就基本破灭了。</p>\n<p>纯函数有许多良好的属性。</p>\n<ul>\n<li><p><strong>线程安</strong>全 使用值参数的纯函数是彻底线程安全的。使用引用或指针参数的话，就算是const的，你也应当知晓一个执行非纯操作的线程可能更改或释放其数据的风险。但即便是这种情况，纯函数仍不失为编写安全多线程代码的利器。你可以轻松地将一个纯函数替换为并行实现，或者运行多种实现并比较结果。这让代码的试验和演化都更加便利。</p>\n</li>\n<li><p><strong>可测试性</strong> 纯函数具有引用透明性（referential transparency），也就是说，不论何时调用它，对于同一组参数它永远给出同样的结果，这使它跟那些与其他系统相互交织的东西比起来更易于使用。在编写测试代码的问题上，我从来没有特别尽责；太多代码与大量系统交互，以至于使用它们需要相当精细的控制，而我常常能够说服自己（也许不正确）这样的付出并不值得。纯函数很容易测试，其测试代码就像直接从教料书上摘抄下来的一样：构造一些输入并查看结果。每次遇到一小段目前看起来有些奇技淫巧的代码，我都会把它拆成一个单独的纯函数并编写测试。可怕的是，我常常发现这样的代码中存在问题，意味着我撒下的测试安全网还不够大。</p>\n</li>\n<li><p><strong>可理解性与可维护性</strong> 输入和输出的限制使得纯函数在需要时更易于重新学习，由于文档不足而隐藏了外部信息的情况也会更少。</p>\n</li>\n</ul>\n<p>形式系统和软件的自动推理将来会越来越重要。静态代码分析今天已经很重要了，将代码转换成更加函数式的风格有助于工具对它的分析，或者至少能让速度更快的局部工具所覆盖的问题跟速度慢且更加昂贵的全局工具一样多。我们这个行业讲的是“把事情做出来”，我还看不到关于整个程序“正确性”的形式证明能成为切实的目标，但能够证明代码的特定部分不存在特定种类的问题也是很有价值的。我们可以在开发过程中多运用一些科学和数学成果。</p>\n<p>正在修编程导论课的同学可能一边挠头一边想：“不是所有的程序都要这么写吗？”现实情况却是“大泥球”（Big Balls of Mud）程序多，架构清晰的程序少。传统的命令式编程语言为你提供了安全舱口，结果它们就总是被使用。如果你只是写一些用一下就扔掉的代码，那就怎么方便怎么来，用到全局状态也是常事。如果你在编写一年之后仍将使用的代码，那就要将眼前的便利因素跟日后不可避免的麻烦平衡一下了。大部分程序员都不擅长预测日后改动代码将会导致的各种痛苦。</p>\n<h3 id=\"“纯粹性”实践\"><a href=\"#“纯粹性”实践\" class=\"headerlink\" title=\"“纯粹性”实践\"></a>“纯粹性”实践</h3><p>并非所有东西都可以是纯的，除非程序只操作自己的代码，否则到某个点总要与外部世界交互。尝试最大限度地推进代码的纯粹性可以带来难以想象的乐趣，然而，要达到一个务实的临界点，我们需要承认副作用到某一刻是必要的，然后有效地管理它们。</p>\n<p>即使对某个特定的函数而言，这都不是一个“要么全有要么全无”的目标。随着一个函数的纯度不断提高，其价值可以连续增大，而且从“几乎纯粹”到“完全纯粹”带来的价值要低于从“意大利面条状态”到“基本纯粹”带来的价值。只要让函数朝着纯粹的目标前进，即使不能达到完全的纯度，也能改善你的代码。增减全局计数器或检查一个全局调试标志的函数是不纯的，但如果那是它唯一的不足，它仍然可以收获函数式的大部分好处。</p>\n<p>避免在更大的上下文中造成最坏的结果通常比在有限的情形中达到完美状态更加重要。考虑一下你曾经对付过的最令人不爽的函数或系统，那种只有全副武装才能应付的，几乎可以确定，其中必有复杂的状态网络和代码行为所依赖的各种假设，而这些复杂性还不只发生在参数上。在这些方面强化一下约束，或至少努力防止更多的代码陷入类似的混乱局面，带来的影响将比挤压几个底层的数学函数大得多。</p>\n<p>朝着纯粹性的目标重构代码，这一过程通常包含将计算从它所运行的环境中解脱出来，这几乎必然意味着更多的参数传递。似乎有点奇特——编程语言中的烦琐累赘已被人骂够了，而函数式编程却常常与代码体积的减少相关。函数式编程语言写的程序会比命令式语言的实现更加简洁，其中的因素与使用纯函数在很大程度上是正交的，这些因素包括垃圾回收、强大的内建类型、模式匹配、列表推导、函数合成以及各种语法糖等。程序体积的减少多半与函数式无关，某些命令式语言也能带来同样的效果。</p>\n<p>如果你必须给一个函数传递十多个参数，恼火是应该的，你可以通过一些降低参数复杂性的方法来重构代码。C++中没有任何维护函数纯粹性的语言支持，这确实不太理想。如果有人通过一些不好的方法把一个大量使用的基础函数变得不再纯粹，所有使用这一函数的代码便统统失去了纯粹性。从形式系统的角度听起来这是灾难性的，但还是那句话，这并不是一念之恶便与佛无缘的那种“要么全有要么全无”的主张。很遗憾，大规模软件开发中的问题只能是统计意义上的。</p>\n<p>看来未来的C/C++语言标准很有必要增加一个“pure”关键字。C++中已经有了一个近似的关键字const—一个支持编译时检查程序员意图的可选修饰符，加上它对代码百利而无一害。D语言倒是提供了一个“pure”关键字：<a href=\"http://www.d-programming-language.org/function.html。注意它们对弱纯粹性和强纯粹性的区分—要达到强纯粹，输入参数中的引用或指针需要使用const修饰。\" target=\"_blank\" rel=\"noopener\">http://www.d-programming-language.org/function.html。注意它们对弱纯粹性和强纯粹性的区分—要达到强纯粹，输入参数中的引用或指针需要使用const修饰。</a></p>\n<p>从某些方面来看，语言关键字过于严格了—一个函数即使调用了非纯粹的函数也仍然可以是纯粹的，只要副作用不逃出函数之外即可。如果一个程序只处理命令行参数而不操作随机的文件系统状态，那么整个程序都可看做纯粹的函数式单元。</p>\n<h3 id=\"面向对象程序设计\"><a href=\"#面向对象程序设计\" class=\"headerlink\" title=\"面向对象程序设计\"></a>面向对象程序设计</h3><p>Michael Feathers（twitter @mfeathers）说：OO通过把移动的部件封装起来使代码可理解。FP通过把移动的部件减到最少使代码可理解。</p>\n<p>“移动的部件”就是更改中的状态。通知一个对象改变自己，这是面向对象编程基础教材的第一课，在大多数程序员的观念中根深蒂固，但它却是一种反函数式的行为。将函数和它们操作的数据结构组织在一起，这一基本的OOP思想显然有其价值，但如果想在自己的部分代码中获得函数式编程的好处，那么在这些部分，你必须疏远一下某些面向对象的行为。</p>\n<p>无法声明为const的类方法从定义上就是不纯的，因为它们要修改对象的部分或全部状态集合，这一集合可能十分庞大。它们也不是线程安全的，这里戳一下，那里捅一下，一点一点地把对象置成了非预期的状态，这种力量才真正是Bug的不竭之源。如果不考虑那个隐含的const this指针，从技术角度const对象方法仍可看做纯函数，但许多对象十分庞大，大到它本身就足以构成一种全局状态，从而弱化了纯函数的在简洁清晰上的一些好处。构造函数也可以是纯函数，通常应该努力使之成为纯函数——它们接受参数并返回一个对象。</p>\n<p>从灵活编程的层面来看，你常常可以用更加函数式的方法使用对象，但可能需要一点接口上的改变。在id Software，我们曾有十年时间在使用一个idVec3类，它只有一个改变自己的void Normalize()方法，却没有相应的idVec3 Normalized() const方法。许多字符串方法也是以类似的方式定义的，它们操作自身，而不是返回执行过相应操作的一个新的副本——比如ToLowerCase()、StripFileExtension()等。</p>\n<h3 id=\"性能影响\"><a href=\"#性能影响\" class=\"headerlink\" title=\"性能影响\"></a>性能影响</h3><p>在任何情况下，直接修改内存块几乎都是无法逾越的最优方案，而不这么做就难免牺牲性能。多数时候这只有理论上的好处，我们一向都在用性能换生产率。</p>\n<p>使用纯函数编程会导致更多的数据复制，出于性能方面的考虑，某些情况下这显然会成为不正确的实现策略。举个极端的例子，你可以写一个纯函数的DrawTriangle()，接受一个帧缓存（framebuffer）参数并返回一个全新的画上三角形的帧缓存作为结果。可别这么做。</p>\n<p>按值返回一切结果是自然的函数式编程风格，然而总是依靠编译器实施返回值优化会对性能造成危害，因此对于函数输出的复杂数据结构，传递引用参数常常是合理的，但这么也有不好的一面：它阻止你将返回值声明为const以避免多次赋值。</p>\n<p>很多时候人们都有强烈的欲望去更新传入的复杂结构中的某个值，而不是复制一份副本并返回修改后的版本，但这样等于舍弃了线程安全保障，因此不要轻易这么做。列表的产生倒是一种可以考虑就地更新的合理情形。往列表中追加新的元素，纯函数式的做法是返回尾端包含新元素的一个全新列表副本，原先的列表则保持不变。真正的函数式语言都在实现上运用了特别手法，从而使这种行为的后果没有听上去那么糟糕，但如果在典型的C++容器上这么做，那你就死定了。</p>\n<p>一项重要的缓解因素是，如今性能意味着并行程序设计，相比单线程环境，并行程序即使在性能最优的情形中也需要更多的复制与合并操作，因此复制造成的损失减少了，而复杂性的降低和正确性的提高这两方面的好处相应增加了。例如，当开始考虑并行地运行一个游戏世界中的所有角色时，你就会渐渐明白，用面向对象的方法来更新对象，这在并行环境中难度很大。或许所有对象都引用了世界状态的一个只读版本，而在一帧结束时却复制了更新后的版本……嗨，等一下……</p>\n<h3 id=\"如何行动\"><a href=\"#如何行动\" class=\"headerlink\" title=\"如何行动\"></a>如何行动</h3><p>在自己的代码库中检查某些有一定复杂度的函数，跟踪它能触及的每一比特外部状态以及所有可能的状态更新。即使对它不做一点改动，把这些信息放入一个注释块就已经是极好的文档了。如果函数能够——比方说，通过渲染系统触发一次屏幕刷新，你就可以直接把手举在空中，声明这个函数所有的正副作用已经超出了人类的理解力。你要着手的下一项任务是基于实际执行的计算从头开始重新考虑这个函数。收集所有的输入，把它传给一个纯函数，然后接收结果并做相应处理。</p>\n<p>调试代码的时候，让自己着重了解那些更新的状态和隐藏的参数悄然登场，从而掩盖实际动作的部分。修改一些工具对象的代码，让函数返回新的副本而不是修改自身，除了迭代器，试着在自己使用的每个变量之前都加上const。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjc31sar6000asotd10rcqlup","category_id":"cjc31saqv0006sotd182pct0v","_id":"cjc31sare000dsotdizp0hw8u"},{"post_id":"cjc31saqg0002sotdr64hr7kl","category_id":"cjc31saqv0006sotd182pct0v","_id":"cjc31sarh000gsotdrluysdu2"},{"post_id":"cjc31saqm0004sotdeg34fsy3","category_id":"cjc31saqv0006sotd182pct0v","_id":"cjc31sarj000isotdb3inwtbv"},{"post_id":"cjc31sar10008sotdz0jgymdi","category_id":"cjc31saqv0006sotd182pct0v","_id":"cjc31sarl000lsotdhwibq429"}],"PostTag":[{"post_id":"cjc31saqg0002sotdr64hr7kl","tag_id":"cjc31sar00007sotdg1nyjpsi","_id":"cjc31sari000hsotdlv6n7c65"},{"post_id":"cjc31saqg0002sotdr64hr7kl","tag_id":"cjc31sar9000csotdgu2raz6u","_id":"cjc31sarj000jsotdoef7hero"},{"post_id":"cjc31saqm0004sotdeg34fsy3","tag_id":"cjc31sar00007sotdg1nyjpsi","_id":"cjc31sarm000nsotdn3ulhtje"},{"post_id":"cjc31saqm0004sotdeg34fsy3","tag_id":"cjc31sark000ksotdaref0i5e","_id":"cjc31sarn000osotdq8srpdwr"},{"post_id":"cjc31sar10008sotdz0jgymdi","tag_id":"cjc31sar00007sotdg1nyjpsi","_id":"cjc31sarr000rsotdy0xnlnmf"},{"post_id":"cjc31sar10008sotdz0jgymdi","tag_id":"cjc31sarn000psotd8lqntj6n","_id":"cjc31sarr000ssotdw0k27g1t"},{"post_id":"cjc31sar6000asotd10rcqlup","tag_id":"cjc31sar00007sotdg1nyjpsi","_id":"cjc31sars000tsotd022ip4ct"},{"post_id":"cjc31sar6000asotd10rcqlup","tag_id":"cjc31sarq000qsotdbg5lxp30","_id":"cjc31sart000usotdhwmu14s5"}],"Tag":[{"name":"C++","_id":"cjc31sar00007sotdg1nyjpsi"},{"name":"lambda","_id":"cjc31sar9000csotdgu2raz6u"},{"name":"隐式转换","_id":"cjc31sark000ksotdaref0i5e"},{"name":"高阶函数","_id":"cjc31sarn000psotd8lqntj6n"},{"name":"函数式编程","_id":"cjc31sarq000qsotdbg5lxp30"}]}}